{
  "hash": "de697e3ef12e68ffac589779c1ad0139",
  "result": {
    "markdown": "# RStudio {#rstudio}\n\n\n::: {.cell}\n\n:::\n\n\nこの章では、RStudio の使い方について述べようと思います。ここに書いていることは、他の章全体に関わってきます。\n\n## R と RStudio\n\n::: callout-tip\n\n::: {.cell}\n\n:::\n\n\nTIP 003: R と RStudio って何？\n:::\n\n-   R は、R 本体です (https://cran.r-project.org/)\n-   RStudio は、R を快適に使うためのアプリで、このようなアプリを「統合開発環境」(IDE) とい言います (https://posit.co/download/rstudio-desktop/)\n\nR と RStudio は、それぞれ別の団体が作っています。\n\n## ソース Pane {#source-pane}\n\n::: callout-tip\n\n::: {.cell}\n\n:::\n\n\nTIP 004: 新規ファイルは \"R Script\" か \"R Markdown\"\n:::\n\n## Console Pane {#console-pane}\n\n::: callout-tip\n\n::: {.cell}\n\n:::\n\n\nTIP 005: Console の使い方\n:::\n\nConsole Pane は、最初の状態では左下にあります。\n\n-   Console: R を実行します\n-   Terminal: Windows の場合は PowerShell、macOS の場合は bash です。\n-   Background jobs: R を実行した際に出てきたメッセージが表示されます\n\nConsole に合わせて、以下のように入力してみましょう。\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n1 + 1\n```\n:::\n\n\nそうすると、`[1] 2` と表示されたかと思います。\n\n結果である 2 は分かりますが、`[1]` は何でしょうか？実は、R では変数がすべて複数の値からなるベクトルになります。ベクトルの 1 番目の要素なので、`[1]` と表示されています。\n\nでは、次はわざと 100 この要素からなるベクトルを表示させてみましょう。\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n1:100\n```\n:::\n\n\n\\[1\\] 1 2 3 4 5 6 7 8 9 10 11 12 13 14\n\n\\[15\\] 15 16 17 18 19 20 21 22 23 24 25 26 27 28\n\n...\n\nとなっていますね。二行目は 15 番目の要素なので、`[15]` となっています。\n\n## Environment Pane {#environment-pane}\n\n-   Environment\n-   History\n-   Connections\n-   Build\n-   Tutorial\n\nこのほか、Git を利用すると Git タブが追加されます。\n\n## Files Pane {#files-pane}\n\n右下にあります。\n\n-   Files\n-   Plots\n-   Packages\n-   Help\n-   Viewer\n-   Presentation\n\n## RStudio の基本機能\n\n::: callout-tip\n\n::: {.cell}\n\n:::\n\n\nTIP 006: コードを補完\n:::\n\nRStudio の基本的な機能として、Console と Quarto Document や R Markdown のコードチャンク中で、コード補完をします。\n\n::: callout-tip\n\n::: {.cell}\n\n:::\n\n\nTIP 007: コメント\n:::\n\nR スクリプトや Quarto Document のコードチャンク中で、# 記号はコメントとなります。\n\nソースコードを選択し、Control + Shift + C とすると、まとめてコメントアウトします。\n\n::: callout-tip\n\n::: {.cell}\n\n:::\n\n\nTIP 008: インデント\n:::\n\nソースコードは、見やすくするために適度にインデントをつけた方が良いです。Tab キーを押すことで半角スペース 2 つ分追加します。\n\nインデントを減らしたい場合は Shift + Tab とします。\n\n## RStudio を使いやすくする\n\n::: callout-tip\n\n::: {.cell}\n\n:::\n\n\nTIP 009: ペインを増やす\n:::\n\n## パッケージをインストール\n\n## R の更新\n\n::: callout-tip\n\n::: {.cell}\n\n:::\n\n\nTIP 010: R を更新\n:::\n\n2024/3/8 時点での R バージョンは 4.3.3 です。\n\nRStudio を使用していると、RStudio の新しいバージョンが出ると、アップデートするかどうか聞かれます。\n\nしかしながら、R 自体の更新については何も言ってくれません。\n\nR の新しいバージョンが出たかどうかは自分で調べ、定期的に更新する必要があります。\n\n更新といっても、Webサイトからダウンロードしてインストールするだけです。\n\nhttps://cran.r-project.org/\n\nなお、Windows では、複数バージョンの R をインストールすることができてしまいます。R を更新しても、RStudio は古い R を使用し続けます。\n\nTools \\> Global Options を開き、\n\nGeneral から、R を変更しましょう。\n\n## 関数の中身を見る\n\n::: callout-tip\n\n::: {.cell}\n\n:::\n\n\nTIP 011: 関数の中身を見る\n:::\n\nR に備わっている関数は、その中身を見ることができます。\n\n`chisq.test()` 関数の中身を見てみましょう。\n\n1.  Console を使う\n\nConsole で、関数名を、カッコをつけずに入力します。\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n> chisq.test\n```\n:::\n\n\nこの下に、関数の中身が表示されます。\n\n2.  キーボード操作\n\nQuarto Document や R Markdown で、関数の部分にマウスを合わせて、macOS の場合は Command + Click、Windows の場合は Control + Click します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchisq.test(x)\n```\n:::\n\n\nSource ペインに新たなタブができ、関数の中身が表示されます。\n\n## QMD/Rmd での表の挿入\n\n::: callout-tip\n\n::: {.cell}\n\n:::\n\n\nTIP 012: 表の挿入 (1)\n:::\n\nQuarto Document での表作成は、見出しとデータ部分を `---` (ダッシュ記号の数はいくつでも良い) で区切ることで可能。列を追加するには、`|` を使う。日本語キーボードでは、`0` の 3 つ隣 (SHIFT キーを押しながら)。\n\nhttps://quarto.org/docs/authoring/tables.html\n\n```\n| fruit  | price  |\n|---|-|\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n```\n\n演習: https://github.com/babayoshihiko/R1000/blob/main/exercise/table_not_df/table_Qmd.qmd\n\n::: callout-tip\n\n::: {.cell}\n\n:::\n\n\nTIP 013: 表の挿入 (2)\n:::\n\n左よせ、右よせ、中央揃いは、`:` を使う。ヘッダ部分には適用されない。\n\n```\n| Default | Left | Right | Center |\n|---------|:-----|------:|:------:|\n| 12      | 12   |    12 |   12   |\n| 123     | 123  |   123 |  123   |\n| 1       | 1    |     1 |   1    |\n```\n\n演習: https://github.com/babayoshihiko/R1000/blob/main/exercise/table_not_df/table_Qmd.qmd\n\n::: callout-tip\n\n::: {.cell}\n\n:::\n\n\nTIP 014: 表の挿入 (3): キャプションを設定\n:::\n\nキャプションには、`:` を使う。\n\n```\n| fruit  | price  |\n|---|-|\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n\n: 果物\n```\n\n::: callout-tip\n\n::: {.cell}\n\n:::\n\n\nTIP 015: 表の挿入 (4): 列幅を変更\n:::\n\n以下は、R Markdown にはなかった機能。タイトルを書く `:` にオプションを設定することができる。\n\n```\n| fruit  | price  |\n|---|-|\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n```\n\nドキュメントでは、ダッシュ記号の数で、第 1 列が 75%、第 2 列が 25% になると書かれているが、実際にはそうならない。\n\n```\n| fruit  | price  |\n|--------|--------|\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n\n: {tbl-colwidths=\"[75,25]\"}\n```\n\nこちらは機能する。\n\n::: callout-tip\n\n::: {.cell}\n\n:::\n\n\nTIP 016: 表の挿入 (5): 1 行おきに背景色を変える\n:::\n\n1 行おきに背景色を変える方法。\n\n```\n| fruit  | price  |\n|--------|--------|\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n```\n\n: {.striped .hover}\n\n演習: https://github.com/babayoshihiko/R1000/blob/main/exercise/table_not_df/table_Qmd.qmd\n\n## QMD/Rmd での画像の挿入\n\n::: callout-tip\n\n::: {.cell}\n\n:::\n\n\nTIP 017: 画像ファイルを挿入 (1): PNG\n:::\n\n本文中に\n\n`![キャプション](img/xxxxx.png)`\n\nとします。\n\n::: callout-tip\n\n::: {.cell}\n\n:::\n\n\nTIP 018: 画像ファイルの挿入 (2): PNG (ggplot2)\n:::\n\n次の方法は、ggplot2 を使って PNG ファイルを挿入する方法です。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(grid)   # rasterGrob()\nlibrary(magick) # image_read()\nimg <- ggplot(data.frame()) +\n  xlim(c(0,10)) + ylim(c(0,10)) +\n  annotation_custom(rasterGrob(image_read(\"img/xxx.png\"), interpolate=TRUE), xmin=0, xmax=10, ymin=0, ymax=10) +\n  theme_void()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nimg\n```\n:::\n\n\n多くのパッケージを必要とします。長所として、ggplot2 を使って　PNG ファイルの上にテキストや矢印などを追加することができます。\n\nしかし、位置の調整が難しいことが短所です。\n\n::: callout-tip\n\n::: {.cell}\n\n:::\n\n\nTIP 019: 画像ファイルの挿入 (3): PDF\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)  # qplot()\nlibrary(grid)     # rasterGrob()\nlibrary(magick)   # image_read_pdf(), image_draw()\npdfArtile <- image_read_pdf(\"xxx.pdf\", density=74)\nimg <- qplot(1:10, 1:10, geom=\"blank\") +\n  xlim(c(0,10)) + ylim(c(0,10)) +\n  annotation_custom(rasterGrob(image_draw(pdfArtile[2]), interpolate=TRUE), xmin=0, xmax=10, ymin=0, ymax=10) +\n  annotate(\"rect\",xmin=0.5,xmax=5.0,ymin=2.2,ymax=3.8, alpha=0, fill=\"white\", colour=\"red\", size=2) +\n  scale_x_continuous(expand = c(0, 0)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  coord_cartesian(xlim = c(0,10), ylim = c(0,10), clip = \"off\")  +\n  theme_bw()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nimg\n```\n:::\n\n\n::: callout-tip\n\n::: {.cell}\n\n:::\n\n\nTIP 020: 画像ファイルを横に並べる (1)\n:::\n\n画像が十分小さければ、自然に横に並びます。\n\n![](img/No1.png) ![](img/No2.png)\n\n::: callout-tip\n\n::: {.cell}\n\n:::\n\n\nTIP 021: 画像ファイルを横に並べる (2): **{gridExtra}**\n:::\n\nggplot2 でプロットを作成しておき、**{gridExtra}** の `grid.arrange()` 関数で並べます。ncol が列数、nrow が行数を指定します。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(grid)      # rasterGrob()\nlibrary(magick)    # image_read()\nlibrary(gridExtra) #grid.arrange\nimg1 <- rasterGrob(image_read(\"img/No1.png\"))\nimg2 <- rasterGrob(image_read(\"img/No2.png\"))\ngrid.arrange(img1, img2, ncol=2, nrow=1)\n```\n\n::: {.cell-output-display}\n![](rstudio_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n**{gridExtra}** では、より複雑なレイアウトも可能です。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimg3 <- rasterGrob(image_read(\"img/No3.png\"))\ngrid.arrange(img1, img2, img3, layout_matrix=matrix(c(1,1,2,3), ncol=2))\n```\n\n::: {.cell-output-display}\n![](rstudio_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nlayout_matrix 引数にわらすのは Matrix クラスです。以下の様に、1 を縦に並べることで、上の様なレイアウトになります。\n\n\\[\n\n\n```{=tex}\n\\begin{pmatrix} 1 & 2 \\\\ 1 & 3 \\\\ \\end{pmatrix}\n```\n\n\\]\n\n## Addin\n\n::: callout-tip\n\n::: {.cell}\n\n:::\n\n\nTIP 022: addin\n:::\n\nAddin は、RStudio の上部、メニューアイコンにあります。Addin も R のパッケージです。インストールすると、すぐに使うことができます。\n\nAddin は、デフォルトのものは少ないので、追加でインストールしましょう。\n\n::: callout-tip\n\n::: {.cell}\n\n:::\n\n\nTIP 023: **{styler}**\n:::\n\n**{styler}** パッケージをインストールしてみましょう。\n\n以下のコードは、インデントされていません。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (a == 1) {\nprint(\"hello\")\n}\n```\n:::\n\n\nコードを選択し、Addins > Style selection を実行すると、以下のようになります。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (a == 1) {\n  print(\"hello\")\n}\n```\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "rstudio_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}