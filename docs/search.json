[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R1000",
    "section": "",
    "text": "Preface\nR 言語は、統計解析を行うためのプログラミング言語です。RStudio は、R 言語を快適に使用する統合開発環境です。\nこれまで、Zoom を使ってオンラインで RStudio 勉強会を開催してきました。時間帯は早朝 7:30-9:00 という朝活です。この勉強会は現在でも継続しています。https://saturdaymorning.connpass.com/\nこのサイトは、勉強会から生まれたものです。このサイトの形式としては、Cookbook や逆引き辞典の様に、「R でやりたいこと」を小さく分割しています。基本的には、プログラミング初心者でもわかる様にしています。\n逆に、R に備わっているものの、ほとんど使わない機能などは紹介していません。\nR は、フリーソフトウェアです。10,000 を超えるパッケージがあり、たくさんの関数があります。パッケージは {package} と表示し、関数は function() と表示しています。\nまた、R を実行するためのコードは、\n\na &lt;- 1:10\n\nという様に、背景を灰色にして表示しています。一部、R 以外のプログラミング言語のものもあります。\nR でやりたいことの分割単位を TIP と定義しています。\n\n\n\n\n\n\nTip with Title\n\n\n\nTIP 123: このように表示\n\n\nこの後、解説が続く形にしています。",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 ファイル\nR を行う場合、File &gt; New File を見るとたくさんの種類のファイルが並んでいます。\nそれぞれに特徴がありますが、RStudio らしいのは 上から 2 つめの Quarto Document または 5 つめの R Markdown でしょう。\nQuarto Document や R Markdown を初めて作成する場合は、パッケージのインストールが必要になります。パッケージについては、次の節で説明します。\nまた研究などの場合は、New File ではなく New Project の方が良いでしょう。\nこのサイトは、Quarto Website (Quarto Document) 形式で作成しています。\n演習: https://github.com/babayoshihiko/R1000/blob/main/exercise/intro/Quarto.qmd",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#ファイル",
    "href": "intro.html#ファイル",
    "title": "1  Introduction",
    "section": "",
    "text": "Tip\n\n\n\nTIP 001: R のファイル",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#パッケージ",
    "href": "intro.html#パッケージ",
    "title": "1  Introduction",
    "section": "1.2 パッケージ",
    "text": "1.2 パッケージ\nR は、基本機能だけで作業することは少なく、必要に応じて「パッケージ」をインストールし、読み込んで使います。\nなお、以下のパッケージは基本機能に含まれています: base, compiler, datasets, grDevices, graphics, grid, methods, parallel, splines, stats, stats4, tcltk, tools, translations, utils\n\n\n\n\n\n\nTip\n\n\n\nTIP 002: パッケージの保存先\n\n\nパッケージの保存先は、\n\n.libPaths()\n\nで確認することができます。\nパッケージの保存先を変更したい場合、フォルダを作っておいた上で、以下のファイルを作成します。\nFile &gt; New File &gt; Text File (下から 4 つめ)\n\nmacOS: /Users/username/.Renviron\nWindows: C:.Renviron\n\n(Windows の場合、“My Document” フォルダのことです。)\nR_LIBS=“/Users/username/CRAN”\nと書き込んでおきます。\nこの後、RStudio を閉じて立ち上げると、.libPaths() にフォルダ “/Users/baba/CRAN” が追加されています。\n特に、Windows ではデフォルトで OneDrive 内に保存することになっているので、必ず変更しておきましょう。理由は、OneDrive は、オンラインストレージなので、頻繁にネットに接続し、また同期していないとファイルが消えてしまうことがあります。さらに、ユーザ名が日本語の場合はエラーが出ます。\n厳密にいうと、パッケージは関数などのソースコードで、ライブラリはパッケージの保存場所を指します。",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "rstudio.html",
    "href": "rstudio.html",
    "title": "2  RStudio",
    "section": "",
    "text": "2.1 R と RStudio\nR と RStudio は、それぞれ別の団体が作っています。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudio</span>"
    ]
  },
  {
    "objectID": "rstudio.html#r-と-rstudio",
    "href": "rstudio.html#r-と-rstudio",
    "title": "2  RStudio",
    "section": "",
    "text": "Tip\n\n\n\nTIP 003: R と RStudio って何？\n\n\n\nR は、R 本体です (https://cran.r-project.org/)\nRStudio は、R を快適に使うためのアプリで、このようなアプリを「統合開発環境」(IDE) とい言います (https://posit.co/download/rstudio-desktop/)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudio</span>"
    ]
  },
  {
    "objectID": "rstudio.html#source-pane",
    "href": "rstudio.html#source-pane",
    "title": "2  RStudio",
    "section": "2.2 ソース Pane",
    "text": "2.2 ソース Pane\n\n\n\n\n\n\nTip\n\n\n\nTIP 004: 新規ファイルは “R Script” か “R Markdown”",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudio</span>"
    ]
  },
  {
    "objectID": "rstudio.html#console-pane",
    "href": "rstudio.html#console-pane",
    "title": "2  RStudio",
    "section": "2.3 Console Pane",
    "text": "2.3 Console Pane\n\n\n\n\n\n\nTip\n\n\n\nTIP 005: Console の使い方\n\n\nConsole Pane は、最初の状態では左下にあります。\n\nConsole: R を実行します\nTerminal: Windows の場合は PowerShell、macOS の場合は bash です。\nBackground jobs: R を実行した際に出てきたメッセージが表示されます\n\nConsole に合わせて、以下のように入力してみましょう。\n\n1 + 1\n\nそうすると、[1] 2 と表示されたかと思います。\n結果である 2 は分かりますが、[1] は何でしょうか？実は、R では変数がすべて複数の値からなるベクトルになります。ベクトルの 1 番目の要素なので、[1] と表示されています。\nでは、次はわざと 100 この要素からなるベクトルを表示させてみましょう。\n\n1:100\n\n[1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14\n[15] 15 16 17 18 19 20 21 22 23 24 25 26 27 28\n…\nとなっていますね。二行目は 15 番目の要素なので、[15] となっています。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudio</span>"
    ]
  },
  {
    "objectID": "rstudio.html#environment-pane",
    "href": "rstudio.html#environment-pane",
    "title": "2  RStudio",
    "section": "2.4 Environment Pane",
    "text": "2.4 Environment Pane\n\nEnvironment\nHistory\nConnections\nBuild\nTutorial\n\nこのほか、Git を利用すると Git タブが追加されます。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudio</span>"
    ]
  },
  {
    "objectID": "rstudio.html#files-pane",
    "href": "rstudio.html#files-pane",
    "title": "2  RStudio",
    "section": "2.5 Files Pane",
    "text": "2.5 Files Pane\n右下にあります。\n\nFiles\nPlots\nPackages\nHelp\nViewer\nPresentation",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudio</span>"
    ]
  },
  {
    "objectID": "rstudio.html#rstudio-の基本機能",
    "href": "rstudio.html#rstudio-の基本機能",
    "title": "2  RStudio",
    "section": "2.6 RStudio の基本機能",
    "text": "2.6 RStudio の基本機能\n\n\n\n\n\n\nTip\n\n\n\nTIP 006: コードを補完\n\n\nRStudio の基本的な機能として、Console と Quarto Document や R Markdown のコードチャンク中で、コード補完をします。\n\n\n\n\n\n\nTip\n\n\n\nTIP 007: コメント\n\n\nR スクリプトや Quarto Document のコードチャンク中で、# 記号はコメントとなります。\nソースコードを選択し、Control + Shift + C とすると、まとめてコメントアウトします。\n\n\n\n\n\n\nTip\n\n\n\nTIP 008: インデント\n\n\nソースコードは、見やすくするために適度にインデントをつけた方が良いです。Tab キーを押すことで半角スペース 2 つ分追加します。\nインデントを減らしたい場合は Shift + Tab とします。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudio</span>"
    ]
  },
  {
    "objectID": "rstudio.html#rstudio-を使いやすくする",
    "href": "rstudio.html#rstudio-を使いやすくする",
    "title": "2  RStudio",
    "section": "2.7 RStudio を使いやすくする",
    "text": "2.7 RStudio を使いやすくする\n\n\n\n\n\n\nTip\n\n\n\nTIP 009: ペインを増やす",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudio</span>"
    ]
  },
  {
    "objectID": "rstudio.html#パッケージをインストール",
    "href": "rstudio.html#パッケージをインストール",
    "title": "2  RStudio",
    "section": "2.8 パッケージをインストール",
    "text": "2.8 パッケージをインストール",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudio</span>"
    ]
  },
  {
    "objectID": "rstudio.html#r-の更新",
    "href": "rstudio.html#r-の更新",
    "title": "2  RStudio",
    "section": "2.9 R の更新",
    "text": "2.9 R の更新\n\n\n\n\n\n\nTip\n\n\n\nTIP 010: R を更新\n\n\n2024/3/8 時点での R バージョンは 4.3.3 です。\nRStudio を使用していると、RStudio の新しいバージョンが出ると、アップデートするかどうか聞かれます。\nしかしながら、R 自体の更新については何も言ってくれません。\nR の新しいバージョンが出たかどうかは自分で調べ、定期的に更新する必要があります。\n更新といっても、Webサイトからダウンロードしてインストールするだけです。\nhttps://cran.r-project.org/\nなお、Windows では、複数バージョンの R をインストールすることができてしまいます。R を更新しても、RStudio は古い R を使用し続けます。\nTools &gt; Global Options を開き、\nGeneral から、R を変更しましょう。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudio</span>"
    ]
  },
  {
    "objectID": "rstudio.html#関数の中身を見る",
    "href": "rstudio.html#関数の中身を見る",
    "title": "2  RStudio",
    "section": "2.10 関数の中身を見る",
    "text": "2.10 関数の中身を見る\n\n\n\n\n\n\nTip\n\n\n\nTIP 011: 関数の中身を見る\n\n\nR に備わっている関数は、その中身を見ることができます。\nchisq.test() 関数の中身を見てみましょう。\n\nConsole を使う\n\nConsole で、関数名を、カッコをつけずに入力します。\n\n&gt; chisq.test\n\nこの下に、関数の中身が表示されます。\n\nキーボード操作\n\nQuarto Document や R Markdown で、関数の部分にマウスを合わせて、macOS の場合は Command + Click、Windows の場合は Control + Click します。\n\nchisq.test(x)\n\nSource ペインに新たなタブができ、関数の中身が表示されます。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudio</span>"
    ]
  },
  {
    "objectID": "rstudio.html#qmdrmd-での表の挿入",
    "href": "rstudio.html#qmdrmd-での表の挿入",
    "title": "2  RStudio",
    "section": "2.11 QMD/Rmd での表の挿入",
    "text": "2.11 QMD/Rmd での表の挿入\n\n\n\n\n\n\nTip\n\n\n\nTIP 012: 表の挿入 (1)\n\n\nQuarto Document での表作成は、見出しとデータ部分を --- (ダッシュ記号の数はいくつでも良い) で区切ることで可能。列を追加するには、| を使う。日本語キーボードでは、0 の 3 つ隣 (SHIFT キーを押しながら)。\nhttps://quarto.org/docs/authoring/tables.html\n| fruit  | price  |\n|---|-|\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n演習: https://github.com/babayoshihiko/R1000/blob/main/exercise/table_not_df/table_Qmd.qmd\n\n\n\n\n\n\nTip\n\n\n\nTIP 013: 表の挿入 (2)\n\n\n左よせ、右よせ、中央揃いは、: を使う。ヘッダ部分には適用されない。\n| Default | Left | Right | Center |\n|---------|:-----|------:|:------:|\n| 12      | 12   |    12 |   12   |\n| 123     | 123  |   123 |  123   |\n| 1       | 1    |     1 |   1    |\n演習: https://github.com/babayoshihiko/R1000/blob/main/exercise/table_not_df/table_Qmd.qmd\n\n\n\n\n\n\nTip\n\n\n\nTIP 014: 表の挿入 (3): キャプションを設定\n\n\nキャプションには、: を使う。\n| fruit  | price  |\n|---|-|\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n\n: 果物\n\n\n\n\n\n\nTip\n\n\n\nTIP 015: 表の挿入 (4): 列幅を変更\n\n\n以下は、R Markdown にはなかった機能。タイトルを書く : にオプションを設定することができる。\n| fruit  | price  |\n|---|-|\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\nドキュメントでは、ダッシュ記号の数で、第 1 列が 75%、第 2 列が 25% になると書かれているが、実際にはそうならない。\n| fruit  | price  |\n|--------|--------|\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n\n: {tbl-colwidths=\"[75,25]\"}\nこちらは機能する。\n\n\n\n\n\n\nTip\n\n\n\nTIP 016: 表の挿入 (5): 1 行おきに背景色を変える\n\n\n1 行おきに背景色を変える方法。\n| fruit  | price  |\n|--------|--------|\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n: {.striped .hover}\n演習: https://github.com/babayoshihiko/R1000/blob/main/exercise/table_not_df/table_Qmd.qmd",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudio</span>"
    ]
  },
  {
    "objectID": "rstudio.html#qmdrmd-での画像の挿入",
    "href": "rstudio.html#qmdrmd-での画像の挿入",
    "title": "2  RStudio",
    "section": "2.12 QMD/Rmd での画像の挿入",
    "text": "2.12 QMD/Rmd での画像の挿入\n\n\n\n\n\n\nTip\n\n\n\nTIP 017: 画像ファイルを挿入 (1): PNG\n\n\n本文中に\n![キャプション](img/xxxxx.png)\nとします。\n\n\n\n\n\n\nTip\n\n\n\nTIP 018: 画像ファイルの挿入 (2): PNG (ggplot2)\n\n\n次の方法は、ggplot2 を使って PNG ファイルを挿入する方法です。\n\nlibrary(ggplot2)\nlibrary(grid)   # rasterGrob()\nlibrary(magick) # image_read()\nimg &lt;- ggplot(data.frame()) +\n  xlim(c(0,10)) + ylim(c(0,10)) +\n  annotation_custom(rasterGrob(image_read(\"img/xxx.png\"), interpolate=TRUE), xmin=0, xmax=10, ymin=0, ymax=10) +\n  theme_void()\n\n\nimg\n\n多くのパッケージを必要とします。長所として、ggplot2 を使って　PNG ファイルの上にテキストや矢印などを追加することができます。\nしかし、位置の調整が難しいことが短所です。\n\n\n\n\n\n\nTip\n\n\n\nTIP 019: 画像ファイルの挿入 (3): PDF\n\n\n\nlibrary(ggplot2)  # qplot()\nlibrary(grid)     # rasterGrob()\nlibrary(magick)   # image_read_pdf(), image_draw()\npdfArtile &lt;- image_read_pdf(\"xxx.pdf\", density=74)\nimg &lt;- qplot(1:10, 1:10, geom=\"blank\") +\n  xlim(c(0,10)) + ylim(c(0,10)) +\n  annotation_custom(rasterGrob(image_draw(pdfArtile[2]), interpolate=TRUE), xmin=0, xmax=10, ymin=0, ymax=10) +\n  annotate(\"rect\",xmin=0.5,xmax=5.0,ymin=2.2,ymax=3.8, alpha=0, fill=\"white\", colour=\"red\", size=2) +\n  scale_x_continuous(expand = c(0, 0)) +\n  scale_y_continuous(expand = c(0, 0)) +\n  coord_cartesian(xlim = c(0,10), ylim = c(0,10), clip = \"off\")  +\n  theme_bw()\n\n\nimg\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 020: 画像ファイルを横に並べる (1)\n\n\n画像が十分小さければ、自然に横に並びます。\n \n\n\n\n\n\n\nTip\n\n\n\nTIP 021: 画像ファイルを横に並べる (2): {gridExtra}\n\n\nggplot2 でプロットを作成しておき、{gridExtra} の grid.arrange() 関数で並べます。ncol が列数、nrow が行数を指定します。\n\nlibrary(grid)      # rasterGrob()\nlibrary(magick)    # image_read()\nlibrary(gridExtra) #grid.arrange\nimg1 &lt;- rasterGrob(image_read(\"img/No1.png\"))\nimg2 &lt;- rasterGrob(image_read(\"img/No2.png\"))\ngrid.arrange(img1, img2, ncol=2, nrow=1)\n\n\n\n\n\n\n\n\n{gridExtra} では、より複雑なレイアウトも可能です。\n\nimg3 &lt;- rasterGrob(image_read(\"img/No3.png\"))\ngrid.arrange(img1, img2, img3, layout_matrix=matrix(c(1,1,2,3), ncol=2))\n\n\n\n\n\n\n\n\nlayout_matrix 引数にわらすのは Matrix クラスです。以下の様に、1 を縦に並べることで、上の様なレイアウトになります。\n[\n\\[\\begin{pmatrix} 1 & 2 \\\\ 1 & 3 \\\\ \\end{pmatrix}\\]\n]",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudio</span>"
    ]
  },
  {
    "objectID": "rstudio.html#addin",
    "href": "rstudio.html#addin",
    "title": "2  RStudio",
    "section": "2.13 Addin",
    "text": "2.13 Addin\n\n\n\n\n\n\nTip\n\n\n\nTIP 022: addin\n\n\nAddin は、RStudio の上部、メニューアイコンにあります。Addin も R のパッケージです。インストールすると、すぐに使うことができます。\nAddin は、デフォルトのものは少ないので、追加でインストールしましょう。\n\n\n\n\n\n\nTip\n\n\n\nTIP 023: {styler}\n\n\n{styler} パッケージをインストールしてみましょう。\n以下のコードは、インデントされていません。\n\nif (a == 1) {\nprint(\"hello\")\n}\n\nコードを選択し、Addins &gt; Style selection を実行すると、以下のようになります。\n\nif (a == 1) {\n  print(\"hello\")\n}",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>RStudio</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "3  データ",
    "section": "",
    "text": "3.1 基本データ型\nR では、変数のことをベクトルと言います。「アトミックベクトル」ということもあります。多くのプログラミングでは、\ni = 1\nの様に表記します。R でも = を使うこともできますが、&lt;- を使うこともできます。\na &lt;- 1\nb &lt;- \"01\"\nc &lt;- TRUE\nR の基本データ型 (mode) は、以下の 6 つあります。\na &lt;- 1\nmode(a)\n\n[1] \"numeric\"\nb &lt;- \"1\"\nmode(b)\n\n[1] \"character\"\nc &lt;- TRUE\nmode(c)\n\n[1] \"logical\"\nd &lt;- NA\nmode(d)\n\n[1] \"logical\"\n数値のデータ型 (mode が numeric なもの) に対しては、細分類があります。主要なものとしては、「整数」(integer) と、小数も扱うことのできる「倍精度浮動小数点数」(double) と言われているものです。\n細分類は、typeof() 関数で確認することができます。\n整数を作成する際には、数値の後ろに L をつけます。なぜ L なのか、、、R に詳しい人でもわからないようです。\na &lt;- 1L\ntypeof(a)\n\n[1] \"integer\"\nb &lt;- 1.1\ntypeof(b)\n\n[1] \"double\"\n変数は一つとは限りません。同じ mode の変数をまとめたベクトルというものが R では基本になります。\nベクトルを作るには、c() 関数を使います。\nベクトルの i 番目の要素を取り出すには、a[i] のように[ ] を使います。\n[1] 9\n1 から 100 などの連続した等差数列は、とても簡単に作ることができます。\na &lt;- 1:100\n初項 3、公差 2 を 55 まで作ります。\na &lt;- seq.int(from = 3, to = 55, by = 2)\nサイコロを振る様に、ランダムに数値を作ることもできます。1 から 6 までの値を、10 回作ります。\na &lt;- sample(1:6, 10, replace = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>データ</span>"
    ]
  },
  {
    "objectID": "data.html#基本データ型",
    "href": "data.html#基本データ型",
    "title": "3  データ",
    "section": "",
    "text": "Tip\n\n\n\nTIP 024: データ型: mode()\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 025: mode() でデータ型を確認\n\n\n\n\nnumeric\ncomplex\ncharacter\nlogical\nlist\nraw\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 026: データ型: typeof()\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 027: ベクトル (1): c() 関数\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 028: ベクトル (2): 等差数列\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 029: ベクトル (3): サイコロを振る",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>データ</span>"
    ]
  },
  {
    "objectID": "data.html#計算",
    "href": "data.html#計算",
    "title": "3  データ",
    "section": "3.2 計算",
    "text": "3.2 計算\n\n\n\n\n\n\nTip\n\n\n\nTIP 030: 計算\n\n\n四則演算は +, -, *, / という記号を使います。\n\n3 * 5 # 15 になります\n8 / 2 #  4 になります\n\nべき乗は ^ を使います。平方根は、sqrt() 関数を使います。\n\n9 ^ 2   # 81 になります\nsqrt(9) #  3 になります\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 031: 階乗\n\n\n\nn &lt;- 10\ngamma(n+1)\nprod(1:n)\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 032: 対数\n\n\n対数は、e を底とするものは log() 関数、10 を底とするものは log10() です。\n\nlog(10)     # 2.302585\nlog10(10)   # 1",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>データ</span>"
    ]
  },
  {
    "objectID": "data.html#ベクトル",
    "href": "data.html#ベクトル",
    "title": "3  データ",
    "section": "3.3 ベクトル",
    "text": "3.3 ベクトル\n\n\n\n\n\n\nTip\n\n\n\nTIP 033: ベクトル\n\n\n変数の最小単位はベクトルというもので、同じ mode の複数の値を格納することができます。「アトミックベクトル」ということもあります。\nベクトルは、c() 関数を使って作ることができます。\n\na &lt;- c(\"one\", \"two\", \"three\", \"four\", \"five\")\n\ni 番目の要素は、a[i] という形で取り出すことができます。\n\na[3]\n\n[1] \"three\"\n\n\n多くのプログラミング言語では、i は 0 から始まりますが、R は 1 から始まります。R が「統計の言語」のためこの様な仕様となっっています。\n複数の要素を取り出す際にも、c() 関数を使って指定します。\n\na[c(2,4)]\n\n[1] \"two\"  \"four\"\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 034: 繰り返し処理\n\n\nfor 文を使った繰り返し処理の例を示します。a\n\na &lt;- c(\"one\", \"two\", \"three\", \"four\", \"five\")\nfor (element in a){\n  print (element)\n}\n\n[1] \"one\"\n[1] \"two\"\n[1] \"three\"\n[1] \"four\"\n[1] \"five\"",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>データ</span>"
    ]
  },
  {
    "objectID": "data.html#ダミーデータ",
    "href": "data.html#ダミーデータ",
    "title": "3  データ",
    "section": "3.4 ダミーデータ",
    "text": "3.4 ダミーデータ\n\n\n\n\n\n\nTip\n\n\n\nTIP 035: rnorm()\n\n\n関数 rnorm() で、ダミーデータを作ることができます。\n最初の引数は、作りたいダミーデータの数です (サンプルサイズ)。\nまた、平均と標準偏差を指定することもできます。\n\nrnorm(10, mean=10, sd=5)\n\n [1] 10.426374 11.919195 15.041813  6.974612  9.782416 12.528719 10.395000\n [8] 10.653063 12.724810 10.168360\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 036: runif()\n\n\n関数 runif()` で、ダミーデータを作ることができます。\n最初の引数は、作りたいダミーデータの数です (サンプルサイズ)。\nまた、最小値と最大値を指定することもできます。\n\nas.integer(runif(10, min=0, max=10))\n\n [1] 0 7 7 9 0 0 2 2 0 2",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>データ</span>"
    ]
  },
  {
    "objectID": "data.html#要約統計量",
    "href": "data.html#要約統計量",
    "title": "3  データ",
    "section": "3.5 要約統計量",
    "text": "3.5 要約統計量\n\n\n\n\n\n\nTip\n\n\n\nTIP 037: 要約統計量\n\n\n要約統計量とは、いくつかある数値の合計 (sum())、平均値 (mean())、中央値 (median())、最大値 (max())、標準偏差 (standard deviation, sd())、四分位範囲 (interquartile range, IQR()) などのことです。\n\nsaikoro &lt;- sample(1:6, 100, replace = TRUE)\nmean(saikoro)\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 038: 95%信頼区間\n\n\n95%信頼区間 (confidence interval) を得るには、{epiDisplay} が必要です。\n\nlibrary(epiDisplay)\n\nLoading required package: foreign\n\n\nLoading required package: survival\n\n\nLoading required package: MASS\n\n\nLoading required package: nnet\n\nsaikoro &lt;- sample(1:6, 100, replace = TRUE)\nci(saikoro)\n\n   n mean       sd        se lower95ci upper95ci\n 100 3.43 1.776701 0.1776701  3.077464  3.782536",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>データ</span>"
    ]
  },
  {
    "objectID": "data.html#na-処理",
    "href": "data.html#na-処理",
    "title": "3  データ",
    "section": "3.6 NA 処理",
    "text": "3.6 NA 処理\n\n\n\n\n\n\nTip\n\n\n\nTIP 039: NA を削除\n\n\nベクトル内に NA 値があると、うまくいかないことが多くなります。\n\na &lt;- c(1, 2, NA, 3, NA, 4, 5)\nmean(a)\n\nNA があることで、平均値が計算されず、NA が返ってきます。\n次の様に NA を削除しましょう。\n\na &lt;- na.omit(a)\nmean(a)\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 040: NA を 0 に設定\n\n\n\na &lt;- c(1, 2, NA, 3, NA, 4, 5)\na[is.na(a)] &lt;- 0\n\nなお、ロジスティック回帰などの統計手法では多重代入法という処理方法もあります。これはデータフレームで扱います。",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>データ</span>"
    ]
  },
  {
    "objectID": "data.html#文字列",
    "href": "data.html#文字列",
    "title": "3  データ",
    "section": "3.7 文字列",
    "text": "3.7 文字列\n\n\n\n\n\n\nTip\n\n\n\nTIP 041: 文字の結合 (1): paste() と paste0()\n\n\n二つの文字列を結合する際は、paste() 関数を使います。自動的に半角スペースが追加されます。\n\na &lt;- \"Hello\"\nb &lt;- \"World\"\npaste(a, b) # Hello World となる\n\n[1] \"Hello World\"\n\n\nなお、半角スペースを入れたくない場合、paste0() 関数を使います。\n\npaste0(a, b) # HelloWorld となる\n\n[1] \"HelloWorld\"\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 042: 文字の結合 (2): sprintf()\n\n\n\nsprintf(\"%s %s\", a, b) # Hello World となる\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 043: 文字の結合 (3): {stringr}\n\n\n{stringr} パッケージの str_c() 関数は、pasteo() 関数と似た様に使うことができます。ただし、NA などの扱いが変わります。\n\nlibrary(stringr)\nc &lt;- NA\nstr_c(a, b) # \"HelloWorld\" となる\npaste(a, c) # \"Hello NA\" となる\nstr_c(a, c) # NA となる",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>データ</span>"
    ]
  },
  {
    "objectID": "data.html#変換",
    "href": "data.html#変換",
    "title": "3  データ",
    "section": "3.8 変換",
    "text": "3.8 変換\n\n\n\n\n\n\nTip\n\n\n\nTIP 044: 数字を文字に変換 (1): as.character()\n\n\nmode を変換するには、as.*() 関数を使います。\n単純に数字を文字にします。\n\na &lt;- 1\nb &lt;- as.character(a)\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 045: 数字を文字に変換 (2): “002”\n\n\n1 を “001” のように、フォーマットします。\n\na &lt;- 1\nb &lt;- sprintf(\"%03d\", a) # \"001\" となる\n\n書式指定は % で始まります。最後は d や f などの決められた英数字で終わります。d は第 2 引数 (a) を整数として解釈するという意味で、f は浮動小数点として解釈するという意味です。\n中間の “03” は、3 桁に満たない場合は 0 で埋める、という意味になります。\n\na &lt;- 10.1234\nb &lt;- sprintf(\"%.2f\", a) # \"10.12\" となる\n\n中間の “.2” は、小数点以下第 3 位を四捨五入する、という意味になります。\n\n\n\n\n\n\nTip\n\n\n\nTIP 046: 数字を文字に変換 (3): “1,000”\n\n\n\na &lt;- 1000\nb &lt;- format(a, big.mark = \",\") # \"1,000\" となる\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 047: 文字を因子に変換\n\n\n文字列 (character) を因子 (factor) に変換します。\n\na &lt;- c(\"F\", \"M\", \"M\", \"F)\"\nb &lt;- factor(a, levels=c(\"F\", \"M\"))\n\nロジスティック回帰などを行う場合、引数 levels で最初にあるものが参照値になります。\nas.factor() という関数もありますが、これは levels 引数をとらないので、factor() 関数を使うとよいでしょう。なお、as.factor() は、単に factor() に投げるだけの関数です。",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>データ</span>"
    ]
  },
  {
    "objectID": "data.html#オブジェクトを削除",
    "href": "data.html#オブジェクトを削除",
    "title": "3  データ",
    "section": "3.9 オブジェクトを削除",
    "text": "3.9 オブジェクトを削除\n\n\n\n\n\n\nTip\n\n\n\nTIP 048: オブジェクトを削除\n\n\nR で作業を続けていると、ベクトルやデータフレームがたくさんできることがあります。\n作業をクリアにするために、これらを削除したい時があります。まず、変数を削除するには rm() 関数を使います。また、変数をすべて列挙する ls() 関数をその引数に使います。\n\nrm(list=ls())\n\nこれで右上の Environment ペインのオブジェクトがなくなりました。",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>データ</span>"
    ]
  },
  {
    "objectID": "data.html#命名法",
    "href": "data.html#命名法",
    "title": "3  データ",
    "section": "3.10 命名法",
    "text": "3.10 命名法\n\n\n\n\n\n\nTip\n\n\n\nTIP 049: 命名法\n\n\nデータや関数には、命名規則があります。最低限として、数字で始めることはできません。2x などのベクトルは作成することはできません。Error: unexpected symbol in \"2x\" というエラーとなります。\n予約語と言われる単語は避けます。予約語としては、if や TRUE など R で使われる語を使おうとすると、Error: unexpected assignment in \"if &lt;-\" とエラーが出ます。\n予約語ではないが、避けた方が良いのは、T や F です。T は TRUE、F は FALSE の省略形として使われています。F 値を格納しようとして F という変数を使おうとすると、おかしなことになることがあります。\n基本的には、英語で意味が分かりやすい名前をつけます。例えば、df_population や dfPopulation という名前であれば、人口データのデータフレームであることがわかります。\nWikipedia の命名規則",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>データ</span>"
    ]
  },
  {
    "objectID": "datetime.html",
    "href": "datetime.html",
    "title": "4  日付時間",
    "section": "",
    "text": "4.1 Excel から読み込み\nExcel で、あらかじめ Date 型、Time 型、Date (DateTime) 型の 3 つのセルを準備しておきました。\nlibrary(readxl)\ndatetime &lt;- read_excel(\"datetime.xlsx\", \n    col_types = c(\"date\", \"date\", \"date\"))\n読み込んだ結果は、\nTime 型は、勝手に日付が追加されるようです。\ndatetime$time には、``1899-12-31 13:00:00’’ というデータが格納されています。もともと日付はなかったので、1899-12-31 に意味はありません。\nそこで、時間データのみ抽出します。\nlibrary(lubridate)\n\n\nAttaching package: 'lubridate'\n\n\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n\nhms(datetime$time)\n\nWarning in .parse_hms(..., order = \"HMS\", quiet = quiet): Some strings failed\nto parse\n\n\n[1] NA\n\nhour(datetime$time)\n\n[1] 13\n\nminute(datetime$time)\n\n[1] 0\n\nsecond(datetime$time)\n\n[1] 0\nhms() という関数がありますが、うまく機能しません。hour() などの関数は機能しています。",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>日付時間</span>"
    ]
  },
  {
    "objectID": "datetime.html#excel-から読み込み",
    "href": "datetime.html#excel-から読み込み",
    "title": "4  日付時間",
    "section": "",
    "text": "Tip\n\n\n\nTIP 050: {readxl} で読み込み\n\n\n\n\nDate: 2024/1/1\nTime: 13:00:00\nDateTime: 2024/1/1 13:00:00\n\n\n\n\nDate: “2024-01-01”\nTime: “1899-12-31 13:00:00”\nDateTime: “2024-01-01 13:00:00”\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 051: {lubridate} で時間のみ抽出",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>日付時間</span>"
    ]
  },
  {
    "objectID": "datetime.html#lubridate-パッケージ",
    "href": "datetime.html#lubridate-パッケージ",
    "title": "4  日付時間",
    "section": "4.2 {lubridate} パッケージ",
    "text": "4.2 {lubridate} パッケージ\n\n\n\n\n\n\nTip\n\n\n\nTIP 052: {lubridate} Cheat Sheet\n\n\n\n\n\nCheatsheet",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>日付時間</span>"
    ]
  },
  {
    "objectID": "if.html",
    "href": "if.html",
    "title": "5  if",
    "section": "",
    "text": "5.1 論理テスト\n論理演算は、「i は 1 よりも大きいか?」「i の中に 1 は入っているか?」などの比較を行うことです。\nif (\"1\" == 1){\n  print(\"character と numeric も比較可能\")\n} else {\n  print(\"xcharacter と numeric は比較不可能\")\n}\n\n[1] \"character と numeric も比較可能\"\nif (TRUE == 1){\n  print(\"TRUE は 1\")\n} else {\n  print(\"TRUE は 0\")\n}\n\n[1] \"TRUE は 1\"\nベクトルが NA であると、論理演算の結果は NA となります。\n1 == NA\n\n[1] NA\nこの場合、まず、NA であるかどうかを判定する必要があります。\n以下の様な条件式は、エラーとなります。\nx &lt;- NA\nif (x == 1){\n  print(\"x is larger than 1.\")\n} else {\n  print(\"x is not larger than 1.\")\n}\nこのエラーメッセージは、 (x == 1) が TRUE でも FALSE でもない (NA) ために発生しています。",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>if</span>"
    ]
  },
  {
    "objectID": "if.html#論理テスト",
    "href": "if.html#論理テスト",
    "title": "5  if",
    "section": "",
    "text": "Tip\n\n\n\nTIP 056: 論理演算\n\n\n\n\n\n\n演算子\n構文\nテスト\n\n\n\n\n&gt;\na &gt; b\na は b より大きいか?\n\n\n&gt;=\na &gt;= b\na は b 以上か?\n\n\n&lt;\na &gt;= b\na は b より小さいか?\n\n\n&lt;=\na &lt;= b\na は b 以上か?\n\n\n==\na == b\na と b は等しいか?\n\n\n!=\na != b\na と b は等しくないか?\n\n\n%in%\na %in c(1, 2, 3)\na は、1, 2, 3 のうちいずれかの値か?\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 057: 論理演算: 異なる mode の比較\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 058: 論理演算: NA\n\n\n\n\n\n\n\nError in if (x == 1) { : missing value where TRUE/FALSE needed",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>if</span>"
    ]
  },
  {
    "objectID": "if.html#ブール演算",
    "href": "if.html#ブール演算",
    "title": "5  if",
    "section": "5.2 ブール演算",
    "text": "5.2 ブール演算\n\n\n\n\n\n\nTip\n\n\n\nTIP 059: ブール演算\n\n\nブール演算とは、\n\n\n\n演算子\n構文\nテスト\n\n\n\n\n&\ncond1 & cond2\nAND\n\n\n|\ncond1 | cond2\nOR: Shift + 0 の３つ右にあるキー\n\n\nxor\na zorb\na は b より小さいか?\n\n\n!\n!cond\n例: !is.na(x) は x は NA でない\n\n\nall\nall(cond1, cond2, cond3)\n& の拡張\n\n\nany\nany(cond1, cond2, cond3)\n| の拡張",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>if</span>"
    ]
  },
  {
    "objectID": "dataframe.html",
    "href": "dataframe.html",
    "title": "6  データフレーム",
    "section": "",
    "text": "6.1 データフレームを作る\nx &lt;- c(1, 2, 3)\ny &lt;- c(\"red\", \"green\", \"blue\")\nz &lt;- c(TRUE, FALSE, TRUE)\ndf &lt;- data.frame(x, y, z)\nこの方式だと、x, y, z というベクトルもできてしまう。\n以下のコードはベクトルを作らないでデータフレームを作ります。\ndfAnimal &lt;- data.frame(rating=1:4,\n                animal=c('koala', 'hedgehog', 'sloth', 'panda'),\n                country=c('Australia', 'Italy', 'Peru', 'China'),\n                avg_sleep_hours=c(21, 18, 17, 10))\n演習: https://github.com/babayoshihiko/R1000/blob/main/exercise/dataframe/create.qmd\ndf &lt;- read.table(text = \"PatientID, T0, T1, T2\n1,21,20,18\n2,28,26,26\n3,18,15,18\n4,12,15,16\n5,11,11,13\", \nheader = TRUE, \ncolClasses=c(\"factor\", \"integer\", \"double\", \"character\"), \nsep=\",\")\nデータ型を指定しているので、\nここでは、列区切りをコンマ としましたが (sep = \",\")、データ内でコンマを使いたい時などは列区切りを別の記号にします。\ndf &lt;- read.table(text = \"PatientID, T0, T1, T2\n1/21/20/18\n2/28/26/26\n3/18/15/18\n4/12/15/16\n5/11/11/13\", \nheader = TRUE, \ncolClasses=c(\"factor\", \"integer\", \"double\", \"character\"), \nsep=\"/\")\n演習: https://github.com/babayoshihiko/R1000/blob/main/exercise/dataframe/create.qmd\n行列もエクセルの様に 2x2 でデータを持っています。データフレームは、列ごとに異なる mode を設定できますが、行列はすべて同じ mode でなければなりません。\nmy_matrix &lt;- matrix(c(1, 2, 3, 4, 5, 6), nrow=2)\ndf_from_matrix &lt;- data.frame(my_matrix)",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>データフレーム</span>"
    ]
  },
  {
    "objectID": "dataframe.html#データフレームを作る",
    "href": "dataframe.html#データフレームを作る",
    "title": "6  データフレーム",
    "section": "",
    "text": "Tip\n\n\n\nTIP 060: データフレームを作る (1) 列ごとに作る\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 061: データフレームを作る (2) CSV 的な作り方\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 062: データフレームを作る (3) 行列からデータフレームに変換",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>データフレーム</span>"
    ]
  },
  {
    "objectID": "dataframe.html#よく使われるデータフレーム",
    "href": "dataframe.html#よく使われるデータフレーム",
    "title": "6  データフレーム",
    "section": "6.2 よく使われるデータフレーム",
    "text": "6.2 よく使われるデータフレーム\n\n\n\n\n\n\nTip\n\n\n\nTIP 063: よく使われるデータフレーム\n\n\nR の勉強をしていると、よく出てくるデータフレームがあります。有名なものは、iris と mtcars です。\nこれは、R に組み込まれており、data(iris) または data(mtcars) とするだけで使える様になります。Console に data( (カッコを閉じず) まで入力すると、その他のデータフレームが表示されます。\niris とは、植物のアヤメのことで、統計学でも有名な Ronald Aylmer Fisher が論文で使用したデータです。iris には setosa、versicolor、virginica という種と、がく片（sepal）の長さ、幅、および花弁（petal）の長さ、幅のデータがあります。\nmtcars については、?mtcars として調べてみてください。",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>データフレーム</span>"
    ]
  },
  {
    "objectID": "dataframe.html#na-処理",
    "href": "dataframe.html#na-処理",
    "title": "6  データフレーム",
    "section": "6.3 NA 処理",
    "text": "6.3 NA 処理\n\n\n\n\n\n\nTip\n\n\n\nTIP 064: 多重代入法\n\n\nデータで紹介した na.omit() も使うこともできますが、その他の方法を紹介します。\n\ndf &lt;- read.table(text = \"PatientID, Gender, T1, T2\n1,M, 20, 18\n2,F, NA, 26\n3,NA, 15, 18\n4,M, 15, NA\n5,F, 11, NA\", header = TRUE, colClasses=c(\"factor\", \"factor\", \"integer\", \"integer\"), sep=\",\")\n\nGender は一つ NA、T1 も 1 つ NA、T2 は 2 つ NA があります。\n\nlibrary(mice)\ndf_miced &lt;- mice(df,\n                 m = 20,\n                 maxit = 50,\n                 method = \"pmm\",\n                 seed = 1234)\n\ndf_miced$imp を見ると、Gender と T1 は 20 回補完されました。T2 は 2x20 回補完されました。",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>データフレーム</span>"
    ]
  },
  {
    "objectID": "dataframe.html#列名を変更",
    "href": "dataframe.html#列名を変更",
    "title": "6  データフレーム",
    "section": "6.4 列名を変更",
    "text": "6.4 列名を変更\n\n\n\n\n\n\nTip\n\n\n\nTIP 065: 列名を変更\n\n\nまず、データフレーム df の列を確認します。\n\ncolnames(df)[1:ncol(df)]\n\n[1] “タイムスタンプ”\n[2] “性別”\n[3] “経験”\n例えば、16番目の列を変えたい場合、\n\ncolnames(df)[16] &lt;- \"知見\"\n\nとします。\n\n\n\n\n\n\nTip\n\n\n\nTIP 066: 列にラベルを設定\n\n\n列名を日本語にしたり、空白を中に入れることは、あまり好ましくありません。一方、表や図を作成するときに、列名が使われます。\n列にラベルを設定することができます。\n\ndf&lt;- data.frame(col1=1:4,\n  col2=1:4)\nattr(df$col1, \"label\") &lt;- \"Column 1\"\nattr(df$col2, \"label\") &lt;- \"第２列\"",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>データフレーム</span>"
    ]
  },
  {
    "objectID": "dataframe.html#新たに列を作る",
    "href": "dataframe.html#新たに列を作る",
    "title": "6  データフレーム",
    "section": "6.5 新たに列を作る",
    "text": "6.5 新たに列を作る\n\n\n\n\n\n\nTip\n\n\n\nTIP 067: 複数選択を処理 (1)\n\n\nGoogle Document でアンケート調査をすると、複数選択はセル内に押し込まれます。これを、独立した列に格納します。\n\ndf &lt;- read.table(text = \"ID/Gender/Fruit\n1/M/Apple,Orange\n2/F/Apple\n3/M/Banana\n4/M/NA\n5/F/Orange\", header = TRUE, \ncolClasses=c(\"factor\", \"factor\", \"character\"), sep=\"/\")\n\n\ndf$Apple = ifelse(grepl(\"Apple\", df$Fruit), 1, 0)\ndf$Orange = ifelse(grepl(\"Orange\", df$Fruit), 1, 0)\ndf$Banana = ifelse(grepl(\"Banana\", df$Fruit), 1, 0)\ndf\n\n  ID Gender        Fruit Apple Orange Banana\n1  1      M Apple,Orange     1      1      0\n2  2      F        Apple     1      0      0\n3  3      M       Banana     0      0      1\n4  4      M         &lt;NA&gt;     0      0      0\n5  5      F       Orange     0      1      0\n\n\n{dplyr} を使う方法もあります。\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\ndf &lt;- mutate(df, Apple = ifelse(grepl(\"Apple\", Fruit), 1, 0))\ndf &lt;- mutate(df, Orange = ifelse(grepl(\"Orange\", Fruit), 1, 0))\ndf &lt;- mutate(df, Banana = ifelse(grepl(\"Banana\", Fruit), 1, 0))\ndf\n\n  ID Gender        Fruit Apple Orange Banana\n1  1      M Apple,Orange     1      1      0\n2  2      F        Apple     1      0      0\n3  3      M       Banana     0      0      1\n4  4      M         &lt;NA&gt;     0      0      0\n5  5      F       Orange     0      1      0\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 068: 複数選択を処理 (2) OR 文\n\n\nR 言語で、OR 文を使うには、| 記号を使います。\n\ndf &lt;- read.table(text = \"ID/Gender/Fruit\n1/M/Apple,Orange\n2/F/RINGO\n3/M/Banana\n4/M/NA\n5/F/Orange\", header = TRUE, colClasses=c(\"factor\", \"factor\", \"character\"), sep=\"/\")\n\n\ndf$Apple = ifelse(grepl(\"Apple\", df$Fruit) | grepl(\"RINGO\", df$Fruit), 1, 0)\ndf$Orange = ifelse(grepl(\"Orange\", df$Fruit), 1, 0)\ndf$Banana = ifelse(grepl(\"Banana\", df$Fruit), 1, 0)\ndf\n\n  ID Gender        Fruit Apple Orange Banana\n1  1      M Apple,Orange     1      1      0\n2  2      F        RINGO     1      0      0\n3  3      M       Banana     0      0      1\n4  4      M         &lt;NA&gt;     0      0      0\n5  5      F       Orange     0      1      0",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>データフレーム</span>"
    ]
  },
  {
    "objectID": "dataframe.html#部分集合",
    "href": "dataframe.html#部分集合",
    "title": "6  データフレーム",
    "section": "6.6 部分集合",
    "text": "6.6 部分集合\n\n\n\n\n\n\nTip\n\n\n\nTIP 069: 条件に合う列だけの部分集合を作る\n\n\n\ndf &lt;- read.table(text = \"ID/Gender/Include/Fruit\n1/M/TRUE/Apple,Orange\n2/F/TRUE/Apple\n3/M/TRUE/Banana\n4/M/FALSE/NA\n5/F/TRUE/Orange\", header = TRUE, colClasses=c(\"factor\", \"factor\", \"logical\", \"character\"), sep=\"/\")\ndf\n\n  ID Gender Include        Fruit\n1  1      M    TRUE Apple,Orange\n2  2      F    TRUE        Apple\n3  3      M    TRUE       Banana\n4  4      M   FALSE         &lt;NA&gt;\n5  5      F    TRUE       Orange\n\n\n\ndf &lt;- df[df$Include == TRUE,]\ndf\n\n  ID Gender Include        Fruit\n1  1      M    TRUE Apple,Orange\n2  2      F    TRUE        Apple\n3  3      M    TRUE       Banana\n5  5      F    TRUE       Orange\n\n\n\ndf &lt;- read.table(text = \"ID/Gender/Include/Fruit\n1/M/TRUE/Apple,Orange\n2/F/TRUE/Apple\n3/M/TRUE/Banana\n4/M/FALSE/NA\n5/F/TRUE/Orange\", header = TRUE, colClasses=c(\"factor\", \"factor\", \"logical\", \"character\"), sep=\"/\")\n\n\ndf &lt;- subset(df, Include == TRUE)\ndf\n\n  ID Gender Include        Fruit\n1  1      M    TRUE Apple,Orange\n2  2      F    TRUE        Apple\n3  3      M    TRUE       Banana\n5  5      F    TRUE       Orange",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>データフレーム</span>"
    ]
  },
  {
    "objectID": "dataframe.html#手動で編集",
    "href": "dataframe.html#手動で編集",
    "title": "6  データフレーム",
    "section": "6.7 手動で編集",
    "text": "6.7 手動で編集\n\n\n\n\n\n\nTip\n\n\n\nTIP 070: データフレームを手動で編集\n\n\nConsole で、以下の様に入力します。\n\ndf &lt;- edit(df)\n\nこの画面で編集後、Quit を押すと、データフレームが変更されています。\nデータフレームを表示させている場合、自動的に更新されるわけではないので、再表示させてみてください。\n演習: https://github.com/babayoshihiko/R1000/blob/main/exercise/dataframe/edit.qmd",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>データフレーム</span>"
    ]
  },
  {
    "objectID": "dataframe.html#long-形式と-wide-形式",
    "href": "dataframe.html#long-形式と-wide-形式",
    "title": "6  データフレーム",
    "section": "6.8 Long 形式と Wide 形式",
    "text": "6.8 Long 形式と Wide 形式\n\n\n\n\n\n\nTip\n\n\n\nTIP 071: Wide 形式\n\n\nExcel などでデータを準備する際には、なんとなく使用している「型」があると思われます。\n一例として、10人の生徒の体力を見るために、50m走の時間（Speed, 秒）と、幅跳びの距離（Jump, m）を、４月(April)、９月（September)、３月（March)の３回計測したとします。\nおそらく、このような表を作成するのではないでしょうか。\n\n\n\n\n\n\nこのように、被験者一人につき一つの行で、50m走3回と幅跳び3回分を横に広く (wide) に書く形式を Wide 形式と言います。\nこの形式はとても見やすく、このままだいたいの作図もできます。\n一方で、この形式のままでは作図できないものがあります。 その一つが、帯グラフになります。\n\n\n\n\n\n\nTip\n\n\n\nTIP 072: Long 形式\n\n\n\n\n\n\n\n\nこのように、数値が常に同じ列に入っているような形式を Long 形式といいます。",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>データフレーム</span>"
    ]
  },
  {
    "objectID": "dataframe.html#ひどいデータ",
    "href": "dataframe.html#ひどいデータ",
    "title": "6  データフレーム",
    "section": "6.9 ひどいデータ",
    "text": "6.9 ひどいデータ\n\n\n\n\n\n\nTip\n\n\n\nTIP 073: データのクリーニング (1)\n\n\n実際には、ひどいデータにしょっちゅう出くわします。\n例えば、男性は M、女性は F とコード化したとしましょう。\n\nlibrary(readxl)\ndfKentei4Dirty &lt;- read_excel(\"kentei4.xlsx\", sheet = \"bad-factor-sample\")\n\nみてみると、大文字、小文字、さらには半角と全角が入り混じっています。 これを因子にしてみるとよくわかります。\n\ndatatable(dfKentei4Dirty)\n\n\n\n\n\n\ndfKentei4Dirty$Sex1 &lt;- factor(dfKentei4Dirty$Sex)\n\n８つも水準があります。 どうにか、MとFだけにしたいので、stringi パッケージの stri_trans_nfkc() 関数と、base パッケージの toupper() 関数を使ってみます。\n\nlibrary(stringi)\ndfKentei4Dirty$Sex2 &lt;- factor(\n  toupper(\n    stri_trans_nfkc(dfKentei4Dirty$Sex)), \n  levels = c(\"M\", \"F\"))\n\nこのように、ひどいデータを修正する作業を、cleaning や sanitizing といいます。こういった処理に特化したパッケージもありますが、日本語にうまく対応しているのはないようなので、今のところ上記のコードが一番よさそうです。",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>データフレーム</span>"
    ]
  },
  {
    "objectID": "dataframe.html#データフレームを出力",
    "href": "dataframe.html#データフレームを出力",
    "title": "6  データフレーム",
    "section": "6.10 データフレームを出力",
    "text": "6.10 データフレームを出力\nここでは、データフレームを Quarto Document または R Markdown から HTML および PDF 出力する方法を紹介します。\n\n\n\n\n\n\nTip\n\n\n\nTIP 074: knitr::kable()\n\n\n\nlibrary(knitr)\nkable(df)\n\n\n\n\nNumber\nEnglish\nJapanese\n\n\n\n\n1\none\nいち\n\n\n2\ntwo\nに\n\n\n3\nthree\nさん\n\n\n4\nfour\nよん\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 075: {xtable}\n\n\n\nlibrary(xtable)\nprint(xtable(df), type = \"html\")\n\n&lt;!-- html table generated in R 4.4.2 by xtable 1.8-4 package --&gt;\n&lt;!-- Tue Dec 17 15:20:48 2024 --&gt;\n&lt;table border=1&gt;\n&lt;tr&gt; &lt;th&gt;  &lt;/th&gt; &lt;th&gt; Number &lt;/th&gt; &lt;th&gt; English &lt;/th&gt; &lt;th&gt; Japanese &lt;/th&gt;  &lt;/tr&gt;\n  &lt;tr&gt; &lt;td align=\"right\"&gt; 1 &lt;/td&gt; &lt;td align=\"right\"&gt;   1 &lt;/td&gt; &lt;td&gt; one &lt;/td&gt; &lt;td&gt; いち &lt;/td&gt; &lt;/tr&gt;\n  &lt;tr&gt; &lt;td align=\"right\"&gt; 2 &lt;/td&gt; &lt;td align=\"right\"&gt;   2 &lt;/td&gt; &lt;td&gt; two &lt;/td&gt; &lt;td&gt; に &lt;/td&gt; &lt;/tr&gt;\n  &lt;tr&gt; &lt;td align=\"right\"&gt; 3 &lt;/td&gt; &lt;td align=\"right\"&gt;   3 &lt;/td&gt; &lt;td&gt; three &lt;/td&gt; &lt;td&gt; さん &lt;/td&gt; &lt;/tr&gt;\n  &lt;tr&gt; &lt;td align=\"right\"&gt; 4 &lt;/td&gt; &lt;td align=\"right\"&gt;   4 &lt;/td&gt; &lt;td&gt; four &lt;/td&gt; &lt;td&gt; よん &lt;/td&gt; &lt;/tr&gt;\n   &lt;/table&gt;\n\n\n{xtable} は、PDF に出力するときに強みを発揮します。\n\n\n\n\n\n\nTip\n\n\n\nTIP 076: {stargazer}\n\n\n\nlibrary(stargazer)\n\n\nPlease cite as: \n\n\n Hlavac, Marek (2022). stargazer: Well-Formatted Regression and Summary Statistics Tables.\n\n\n R package version 5.2.3. https://CRAN.R-project.org/package=stargazer \n\nstargazer(df, type = \"html\")\n\n\n&lt;table style=\"text-align:center\"&gt;&lt;tr&gt;&lt;td colspan=\"6\" style=\"border-bottom: 1px solid black\"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=\"text-align:left\"&gt;Statistic&lt;/td&gt;&lt;td&gt;N&lt;/td&gt;&lt;td&gt;Mean&lt;/td&gt;&lt;td&gt;St. Dev.&lt;/td&gt;&lt;td&gt;Min&lt;/td&gt;&lt;td&gt;Max&lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td colspan=\"6\" style=\"border-bottom: 1px solid black\"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=\"text-align:left\"&gt;Number&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;2.500&lt;/td&gt;&lt;td&gt;1.291&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;\n&lt;tr&gt;&lt;td colspan=\"6\" style=\"border-bottom: 1px solid black\"&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\n\n\n{stargazer} も、HTML よりも PDF で強みを発揮します。\n\n\n\n\n\n\nTip\n\n\n\nTIP 077: {DT}\n\n\n\nlibrary(DT)\ndatatable(df)\n\n\n\n\n\n{DT} は、大きなデータを HTML で表示するときに最適です。\n\n\n\n\n\n\nTip\n\n\n\nTIP 078: {gt}\n\n\n\nlibrary(gt)\ngt1 &lt;- gt(df)\ntab_style(gt1, \n  style = list(cell_fill(color = \"#b2f7ef\"),\n  cell_text(weight = \"bold\")),\n  locations = cells_body(columns = English))\n\n\n\n\n\n\n\nNumber\nEnglish\nJapanese\n\n\n\n\n1\none\nいち\n\n\n2\ntwo\nに\n\n\n3\nthree\nさん\n\n\n4\nfour\nよん\n\n\n\n\n\n\n\ngt は、画像として出力されいます。\n\n\n\n\n\n\nTip\n\n\n\nTIP 079: {formattable}\n\n\n\nlibrary(formattable)\nformattable(df,\n  list(Number = color_bar(\"#e9c46a\")))\n\n\n\n\n\nNumber\n\n\nEnglish\n\n\nJapanese\n\n\n\n\n\n\n1\n\n\none\n\n\nいち\n\n\n\n\n2\n\n\ntwo\n\n\nに\n\n\n\n\n3\n\n\nthree\n\n\nさん\n\n\n\n\n4\n\n\nfour\n\n\nよん\n\n\n\n\n\n\n{formattable} は、余計なメッセージが出るので、コードチャンクに message = FALSE を追加します。\n\n\n\n\n\n\nTip\n\n\n\nTIP 080: {kableExtra}\n\n\n\nlibrary(kableExtra)\nk1 &lt;- kbl(df)\nk2 &lt;- kable_paper(k1) \ncolumn_spec(k2, \n  2, \n  color = \"white\",\n  background = \"#e9c46a\")\n\n\n\n\nNumber\nEnglish\nJapanese\n\n\n\n\n1\none\nいち\n\n\n2\ntwo\nに\n\n\n3\nthree\nさん\n\n\n4\nfour\nよん\n\n\n\n\n\n\n\n{kableExtra} は、余計なメッセージが出るので、コードチャンクに message = FALSE を追加します。\n\n\n\n\n\n\nTip\n\n\n\nTIP 081: {flextable}\n\n\n\nlibrary(flextable)\nflextable(df)\n\nNumberEnglishJapanese1oneいち2twoに3threeさん4fourよん\n\n\n{flextable} は、余計なメッセージが出るので、コードチャンクに message = FALSE を追加します。\n\n\n\n\n\n\nTip\n\n\n\nTIP 082: {reactable}\n\n\n\nlibrary(reactable)\nlibrary(reactablefmtr)\n\n\nAttaching package: 'reactablefmtr'\n\n\nThe following object is masked from 'package:flextable':\n\n    void\n\n\nThe following objects are masked from 'package:gt':\n\n    google_font, html\n\nreactable(df,\n  defaultColDef = colDef(cell = data_bars(df, \n    box_shadow = TRUE, round_edges = TRUE,\n    text_position = \"outside-base\",\n    fill_color = c(\"#e81cff\", \"#40c9ff\"),\n    background = \"#e5e5e5\",\n    fill_gradient = TRUE)\n))\n\n\n\n\n\n{reactable} は、並べ替えができます。English や Japanese をクリックしてみてください。\n\n\n\n\n\n\nTip\n\n\n\nTIP 083: colorDF\n\n\n\nlibrary(colorDF)\n\ncolorDF: for best results, use terminals which support 256 colors.\n\n\n\nAttaching package: 'colorDF'\n\n\nThe following object is masked from 'package:flextable':\n\n    highlight\n\ncolorDF(df)\n\n# Color data frame (class colorDF) 3 x 4:\n │Number│English│Japanese\n1│     1│one    │いち    \n2│     2│two    │に      \n3│     3│three  │さん    \n4│     4│four   │よん    \n\n\nConsole では色がついて表示されます。",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>データフレーム</span>"
    ]
  },
  {
    "objectID": "na.html",
    "href": "na.html",
    "title": "7  NA",
    "section": "",
    "text": "7.1 NA とは\nエクセルや CSV などからデータをインポートする際に、データの入っていないセルは NA と表示されます。\nまず、データフレームを用意します。それぞれ、データ型を表している列名になっています。\nRStudio でデータフレームを表示させると、通常は NA と表示されます。なお、RStudio 上では、Factor は NA とは表示されないようです。\nNA かどうかを確認するには、is.na() 関数を使います。\nis.na(df[2,\"Factor\"])\n\n[1] TRUE\nis.na(df[3,\"Character\"])\n\n[1] TRUE\nis.na(df[1,\"Double\"])\n\n[1] TRUE",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>NA</span>"
    ]
  },
  {
    "objectID": "na.html#na-とは",
    "href": "na.html#na-とは",
    "title": "7  NA",
    "section": "",
    "text": "Tip\n\n\n\nTIP 084 NA とは",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>NA</span>"
    ]
  },
  {
    "objectID": "na.html#数える",
    "href": "na.html#数える",
    "title": "7  NA",
    "section": "7.2 数える",
    "text": "7.2 数える\n\n\n\n\n\n\nTip\n\n\n\nTIP 085 指定した列の NA を数える\n\n\n\nsum(is.na(df$Double))",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>NA</span>"
    ]
  },
  {
    "objectID": "na.html#置き換え",
    "href": "na.html#置き換え",
    "title": "7  NA",
    "section": "7.3 置き換え",
    "text": "7.3 置き換え\n\n\n\n\n\n\nTip\n\n\n\nTIP 086 すべての列の置き換え\n\n\nすべての列の NA を 0 に置き換えます。ただし、Factor 型のレベルに 0 がないと警告が出ます。\n\ndf[is.na(df)] &lt;- 0\n\n\n\nWarning in `[&lt;-.factor`(`*tmp*`, thisvar, value = 0): invalid factor level, NA\ngenerated\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 087 指定した列の置き換え\n\n\nDouble 列の NA を 0 に置き換えます。\n\ndf[is.na(df$Double),\"Double\"] &lt;- 0",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>NA</span>"
    ]
  },
  {
    "objectID": "table.html",
    "href": "table.html",
    "title": "8  表",
    "section": "",
    "text": "8.1 クロス集計\nデータをインポートし、データフレーム dfInjury に格納します。\nlibrary(readxl)\ndfInjury &lt;- read_excel(\"kentei4.xlsx\", sheet = \"p55-raw\")\ndfInjury$Reason &lt;- factor(dfInjury$Reason)\ndfInjury$Gender &lt;- factor(dfInjury$Gender)\n次に、Base R にある ftable() 関数を使って、クロス集計表を出力してみます。\nftable(dfInjury, row.vars = \"Gender\", col.vars = \"Reason\")\n\n       Reason すり傷 その他 ねんざ 切り傷 頭痛 発熱 腹痛\nGender                                                  \nF                  2      2      2      3   10    3    2\nM                  7      1      1      2    3    0    3\nこれは、確認するためには十分ですが、報告書にこのまま記載するわけにはいきません。 そこで、もう少し見た目の良い表を作るために {crosstable} というパッケージを追加してみます。\nlibrary(crosstable)\nas_flextable(crosstable(dfInjury, cols = Reason, by = Gender))\n\nlabelvariableGenderFMReasonすり傷2 (22.22%)7 (77.78%)その他2 (66.67%)1 (33.33%)ねんざ2 (66.67%)1 (33.33%)切り傷3 (60.00%)2 (40.00%)頭痛10 (76.92%)3 (23.08%)発熱3 (100.00%)0 (0%)腹痛2 (40.00%)3 (60.00%)",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>表</span>"
    ]
  },
  {
    "objectID": "table.html#クロス集計",
    "href": "table.html#クロス集計",
    "title": "8  表",
    "section": "",
    "text": "Tip\n\n\n\nTIP 088: クロス集計 ftable()\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 089: クロス集計 {crosstable}",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>表</span>"
    ]
  },
  {
    "objectID": "table.html#要約",
    "href": "table.html#要約",
    "title": "8  表",
    "section": "8.2 要約",
    "text": "8.2 要約\n\n\n\n\n\n\nTip\n\n\n\nTIP 090: {tables}\n\n\n\nlibrary(tables)\ntable_options(htmloptions(head=FALSE))\ntoHTML(tabular(dfInjury$Reason ~ dfInjury$Gender))\n\n\n\n\n \ndfInjury$Gender\n\n\ndfInjury$Reason\nF\nM\n\n\n\n\nすり傷\n2\n7\n\n\nその他\n2\n1\n\n\nねんざ\n2\n1\n\n\n切り傷\n3\n2\n\n\n頭痛\n10\n3\n\n\n発熱\n3\n0\n\n\n腹痛\n2\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 091: {tableone}\n\n\n医療系の場合、クロス集計表には、質的データにはχ二乗検定、量的データにはt検定（どちらも正規分布を仮定しています）を行い、その p 値を付すことが多い用です。 なお、上記の crosstable でも、test = TRUE という引数を追加することで検定結果を追加することができます。\nそこで、医療系にあったクロス集計表を作成してみます。\n\nlibrary(tableone)\nCreateTableOne(data = dfInjury, strata = \"Gender\", factorVars = \"Reason\")\n\n                       Stratified by Gender\n                        F             M              p      test\n  n                        24            17                     \n  StudentID (mean (SD)) 23.42 (12.45) 17.59 (10.72)   0.126     \n  Reason (%)                                          0.138     \n     すり傷                 2 ( 8.3)      7 ( 41.2)             \n     その他                 2 ( 8.3)      1 (  5.9)             \n     ねんざ                 2 ( 8.3)      1 (  5.9)             \n     切り傷                 3 (12.5)      2 ( 11.8)             \n     頭痛                  10 (41.7)      3 ( 17.6)             \n     発熱                   3 (12.5)      0 (  0.0)             \n     腹痛                   2 ( 8.3)      3 ( 17.6)             \n  Gender = M (%)            0 ( 0.0)     17 (100.0)  &lt;0.001     \n\n\n医療系ということもあり、引数も比較的わかりやすいものになっています。\n引数\n\ndata: データフレーム\nstrata: 層別化する列\nfactorVars: データが因子の列。χ二乗検定される。他の列は量的データとみなされ、t検定される。\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 092: クロス集計 {rpivotTable}\n\n\n最後に、インタラクティブに操作することができる {rpivotTable} パッケージを紹介します。 これは、HTML の特徴を生かして、ウェブページ上で表示を変えることができるものになります。\n\nlibrary(rpivotTable)\nrpivotTable(dfInjury, rows=\"Gender\", cols=\"Reason\", width=\"100%\", height=\"400px\")",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>表</span>"
    ]
  },
  {
    "objectID": "ggplot2.html",
    "href": "ggplot2.html",
    "title": "9  グラフ (ggplot2)",
    "section": "",
    "text": "9.1 棒グラフ\n棒グラフは、数量の大小を比較するのに適しています。\ndfMountain &lt;- data.frame(\n  Mountain = c(\"エベレスト\",\"ゴドウィンオースチン\",\"カンチェンジュンガ\",\"ローツェ\",\"マカルウ\",\"富士山\"),\n  Altitude = c(8848,8611,8586,8516,8463,3776)\n)\n{ggplot2} を使って、棒グラフを描いてみましょう。\nlibrary(ggplot2)\nggplot(dfMountain, aes(x = Mountain, y = Altitude)) +\n  geom_bar(stat = \"identity\")\n注意: ggplot2 では、あいうえお順に並べるようです。このため、並び順が予想と異なっています。\nX 軸に設定する列を、文字型ではなく因子型に変更します。\ndfMountain$Mountain &lt;- factor(dfMountain$Mountain,\n  levels = c(\"エベレスト\",\"ゴドウィンオースチン\",\"カンチェンジュンガ\",\"ローツェ\",\"マカルウ\",\"富士山\"))\n元の図の幅と色から変えましょう。 geom_bar() 関数に、引数の width と fill を追加します。\nlibrary(ggplot2)\nggplot(dfMountain, aes(x = Mountain, y = Altitude)) +\n  geom_bar(stat = \"identity\", width = 0.4, fill = \"blue\") +\n  theme_bw(base_family = \"Hiragino Kaku Gothic Pro W3\")\nつぎに、y 軸の目盛りを設定します。 これは、scale_y_discrete() 関数を追加します。\nlibrary(ggplot2)\nggplot(dfMountain, aes(x = Mountain, y = Altitude)) +\n  geom_bar(stat = \"identity\", width = 0.4, fill = \"blue\") +\n  scale_y_discrete(limits=c(0,1000,2000,3000,4000,5000,6000,7000,8000,9000,10000)) +\n  theme_bw(base_family = \"Hiragino Kaku Gothic Pro W3\")\n\nWarning in scale_y_discrete(limits = c(0, 1000, 2000, 3000, 4000, 5000, : Continuous limits supplied to discrete scale.\nℹ Did you mean `limits = factor(...)` or `scale_*_continuous()`?\n軸は、数直線です。ただし、数値はそのままでは見づらいことがあります。\nlibrary(ggplot2)\nggplot(dfMountain, aes(x = Mountain, y = Altitude)) +\n  geom_bar(stat = \"identity\", width = 0.4, fill = \"blue\") +\n  scale_y_discrete(limits=c(0,1000,2000,3000,4000,5000,6000,7000,8000,9000,10000),\n                   labels=c(\"0\",\"1,000\",\"2,000\",\"3,000\",\"4,000\",\"5,000\",\"6,000\",\"7,000\",\"8,000\",\"9,000\",\"10,000\")) +\n  theme_bw(base_family = \"Hiragino Kaku Gothic Pro W3\")\n\nWarning in scale_y_discrete(limits = c(0, 1000, 2000, 3000, 4000, 5000, : Continuous limits supplied to discrete scale.\nℹ Did you mean `limits = factor(...)` or `scale_*_continuous()`?\nlibrary(ggplot2)\nggplot(dfMountain, aes(x = Mountain, y = Altitude)) +\n  geom_bar(stat = \"identity\", width = 0.4, fill = \"blue\") +\n  scale_y_discrete(limits=c(0,1000,2000,3000,4000,5000,6000,7000,8000,9000,10000),\n                   labels=c(\"0\",\"1,000\",\"2,000\",\"3,000\",\"4,000\",\"5,000\",\"6,000\",\"7,000\",\"8,000\",\"9,000\",\"10,000\")) +\n  theme_bw(base_family = \"Hiragino Kaku Gothic Pro W3\")\n\nWarning in scale_y_discrete(limits = c(0, 1000, 2000, 3000, 4000, 5000, : Continuous limits supplied to discrete scale.\nℹ Did you mean `limits = factor(...)` or `scale_*_continuous()`?",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>グラフ (ggplot2)</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#棒グラフ",
    "href": "ggplot2.html#棒グラフ",
    "title": "9  グラフ (ggplot2)",
    "section": "",
    "text": "Tip\n\n\n\nTIP 093: 棒グラフ\n\n\n\n\n棒の高さが量を示します。\n棒の幅は統一します。\n並べ方は、種類ごとにまとめたり、大きい順など、工夫をすることができます。\n何種類かの値を同時にグラフ化することもあります。\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 094: 棒グラフの順序を指定\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 095: 棒グラフの色と幅を変える\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 096: 棒グラフの軸の目盛りを変える",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>グラフ (ggplot2)</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#折れ線グラフ",
    "href": "ggplot2.html#折れ線グラフ",
    "title": "9  グラフ (ggplot2)",
    "section": "9.2 折れ線グラフ",
    "text": "9.2 折れ線グラフ\n\n\n\n\n\n\nTip\n\n\n\nTIP 097: 折れ線グラフ\n\n\nread_excel() 関数に、sheet という引数を追加しています。 データフレーム dfJPop を確認してみてください。\n折れ線グラフは、geom_line() 関数を使います。\n\nlibrary(ggplot2)\nggplot(dfJPop, aes(x = Year, y = Population)) +\n  geom_line()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 098: 折れ線グラフに点を追加\n\n\n折れ線グラフに geom_point() 関数を使って点を追加します。\n\nlibrary(ggplot2)\nggplot(dfJPop, aes(x = Year, y = Population)) +\n  geom_line() +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 099: 折れ線グラフの軸の目盛りを変える\n\n\ny 軸の目盛りを変えます。棒グラフと異なり、scale_y_discrete() 関数を scale_y_continuous() に変えます。\n\nlibrary(ggplot2)\nggplot(dfJPop, aes(x = Year, y = Population)) +\n  geom_line() +\n  scale_y_continuous(limits=c(0,140000),\n                     breaks=c(0,20000,40000,60000,80000,100000,120000,140000))\n\n\n\n\n\n\n\n\n教科書的には、_discrete は整数（または順序変数）、_continuous は連続変数の場合に使うことになっています。\nどうやら、棒グラフと折れ線グラフでは、軸の設定方法が異なるようです。\n\n\n\n\n\n\nTip\n\n\n\nTIP 100: 任意のテキストを追加 (1)\n\n\ny 軸の目盛りの数値が大きいため、百万人単位に変えたいとします。\nscale_y_continuous() 関数に、labels 引数を設定して目盛りを変更します。\nこれに加えて、annotate() 関数を使い、テキストを追加します。\n\nlibrary(ggplot2)\nggplot(dfJPop, aes(x = Year, y = Population)) +\n  geom_line() +\n  geom_point() + \n  scale_x_continuous(breaks=c(1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010),\n                     expand = c(0, 0)) +\n  scale_y_continuous(limits=c(0,150000),\n                     breaks=c(0,20000,40000,60000,80000,100000,120000,140000),\n                     labels=c(\"0\",\"20\",\"40\",\"60\",\"80\",\"100\",\"120\",\"140\")) +\n  annotate(\"text\", x=1925, y=140000, label=\"(百万人)\", size = 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 101: 任意のテキストを追加 (2): hjust と vjust\n\n\nannotate() の位置は、デフォルトでは、x と y で指定した位置の中央揃えです。\nhjust 引数は、0 が左揃え、0.5 が中央揃え (デフォルト)、1 が右揃えになります。\nvjust 引数は、“top” が上寄せ、“center” が中央、“bottom” が下寄せになります。\n\n\nlibrary(ggplot2)\nggplot(dfJPop, aes(x = Year, y = Population)) +\n  geom_line() +\n  geom_point() + \n  scale_x_continuous(breaks=c(1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2010),\n                     expand = c(0, 0)) +\n  scale_y_continuous(limits=c(0,150000),\n                     breaks=c(0,20000,40000,60000,80000,100000,120000,140000),\n                     labels=c(\"0\",\"20\",\"40\",\"60\",\"80\",\"100\",\"120\",\"140\")) +\n  annotate(\"text\", x=1950, y=140000, label=\"左揃え\", size = 2, hjust = 0) +\n  annotate(\"text\", x=1970, y=140000, label=\"中央揃え\", size = 2, hjust = 0.5) +\n  annotate(\"text\", x=1990, y=140000, label=\"右揃え\", size = 2, hjust = 1) +\n  annotate(\"text\", x=1950, y=100000, label=\"上寄せ\", size = 2, hjust = 0, vjust=\"bottom\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 102: 任意の線を追加\n\n\n線を追加するのも、annotate() 関数を使います。最初の引数を “text” から “segment” に変えます。線の場合は、(x, y) から (xend, yend) まで線が引かれます。\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 103: グラフ外に annotate()\n\n\nグラフ外に annotate() 関数を使って、テキストなどを表示します。\nまず、scale_x_continuous(limits=c(x1,x2)) を使い、 テキストを置く範囲を示します。\nこの上で、表示範囲を coord_cartesian(xlim = c(x3,x4), clip = \"off\") で指定します。\n以下の例では、annotate() を使い、“(百万人)” というテキストをグラフ外に表示させています。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nList of 2\n $ axis.title.x: list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n $ axis.title.y: list()\n  ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi FALSE\n - attr(*, \"validate\")= logi TRUE\n\n\n\nannotate(): プロット上に、文字 (“text”)、ボックス (“rect”)、線 (“segment”) などを描きます。 x, y は、プロット中の x, y を使用します。\ncoord_cartesian(): プロットの範囲を指定します。\n\nここでは、百万人という文字を、図の範囲外である1907年のあたりに表示させたかったので、coord_cartesian() で図の領域を広げ、ただしプロットはscale_x_continuous()で範囲を区切って表示しました。\n\ntheme(): theme(axis.title.x = element_blank()) これは、x軸のタイトルを表示させないための設定です。",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>グラフ (ggplot2)</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#度数とデータフレームの操作",
    "href": "ggplot2.html#度数とデータフレームの操作",
    "title": "9  グラフ (ggplot2)",
    "section": "9.3 度数とデータフレームの操作",
    "text": "9.3 度数とデータフレームの操作\nこの表は、合計値を意図的に追加していません。 まず、Pupils の合計を計算してみましょう。\n\nsum(dfInjury$Pupils)\n\n[1] 40\n\n\n最初に表示される [1] は、返り値の一つ目であることを表しています。 合計は 40 人です。 また、Rmd の文章中で、この「40」という計算結果を表示させたいときは、`r sum(dfInjury$Pupils)` と書きます。",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>グラフ (ggplot2)</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#相対度数",
    "href": "ggplot2.html#相対度数",
    "title": "9  グラフ (ggplot2)",
    "section": "9.4 相対度数",
    "text": "9.4 相対度数\n\n\n\n\n\n\nTip\n\n\n\nTIP 104: 相対度数\n\n\n統計検定４級テキスト p. 56 にあるように、相対度数を計算して、データフレーム dfInjury に追加しましょう。 相対度数の列名は Proportion とします。\n\ndfInjury$Proportion &lt;- proportions(dfInjury$Pupils)\n\n関数\n\nproportions(): ある数字の列 (例: 1, 2, 2) に対し、その相対度数 (例: 0.2, 0.4, 0.4) を返す。\n\ndfInjury$Proportion は、データフレーム dfInjury に、新たに Proportion 列を追加します。 その追加するものが、proportions() 関数の返り値です。 この関数の引数に、dfInjury$Pupils は、データフレーム dfInjury の Pupils 列です。\nR では、このように列データに対して一気に計算をすることができます。\nなお、これは、以下のようにしても得られます。\n\ndfInjury$Proportion &lt;- dfInjury$Pupils / sum(dfInjury$Pupils)",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>グラフ (ggplot2)</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#複合グラフ",
    "href": "ggplot2.html#複合グラフ",
    "title": "9  グラフ (ggplot2)",
    "section": "9.5 複合グラフ",
    "text": "9.5 複合グラフ\n\n\n\n\n\n\nTip\n\n\n\nTIP 105: 複合グラフ\n\n\nここでは、棒グラフと折れ線グラフを一つのプロットに重ねて描いてみようと思います。\n棒グラフの y 軸は左側に設定します。 折れ線グラフの y 軸は右側に設定します。\n複合グラフを描くために、統計検定テキスト４級の p. 60 のデータを使ってみましょう。 まず、エクセルファイルをインポートし、データフレームに格納します。 このデータフレームは、野球選手である松坂投手の球種別の投球数のデータです。 、統計検定テキスト４級の p.60 の表2.2.5の投球数までとなっています。\nfactor() 関数は、因子に変更して返します。 最初の引数の dfMatz$PitchType は、データフレーム dfMatz の PitchType 列を表しています。 因子は順序を付けることができるのですが、ここではそのままの順序にします。 このため、levels = dfMatz$PitchType という引数を追加しています。\n返した値は、データフレーム dfMatz の PitchType 列に格納します。 つまり、上書きをします。\n\nlibrary(readxl)\ndfMatz &lt;- read_excel(\"kentei4.xlsx\", sheet = \"p60\")\ndfMatz$PitchType &lt;- factor(dfMatz$PitchType, levels = dfMatz$PitchType)\n\nRStudio の Environment ペインで、Factor に代わっていることを確認しましょう。\n\n9.5.1 累積度数の計算\n統計検定４級テキスト p. 60 にあるとおり、累積とは、ある度数などを順に足していくことです。 累積度数とは、ある度数列を順に足していった列となります。 R では、累積度数は、Base R にある関数 cumsum() を使って設定することができます。\nデータフレーム dfMatz にある列 Frequency を元に、累積度数を計算します。 累積度数は、新しい列 CumulativeSum に格納します。\n\ndfMatz$CumulativeSum &lt;- cumsum(dfMatz$Frequency)\ndfMatz$CumulativeProportion &lt;- dfMatz$CumulativeSum / sum(dfMatz$Frequency)\n\n最終的に、dfMatz データフレームに、新しい列 CumulativeProportion　を作って格納しています。\n\n\n9.5.2 棒グラフ + 折れ線グラフ\nでは、複合グラフとして、投球数を棒グラフ、累積相対度数を折れ線グラフで描いてみます。\nまずは、級種別の投球数を棒グラフ化します。 おなじみの ggplot() と geom_bar() という関数を使用します。\n\nlibrary(ggplot2)\nggplot(dfMatz, aes(x = PitchType, y = Frequency)) +\n  geom_bar(stat = \"identity\")\n\n\n\n\n\n\n\n\n次に、累積相対度数の折れ線グラフを描きます。 ここで大事なことは、もともと ggplot() 関数には、引数 x に PitchType, 引数 y に Frequency を指定しています。 このままでは x はよくても y が累積相対度数になりません。 そこで、geom_line() 関数には、改めてデータフレーム、x, y を指定します。\nただし、ここで問題があります。 上で棒グラフを描いたときに、y 軸の幅が 0 から 1560 までになりました。\nしかし、CumulativeProportion は割合なので、数値が 0.1 や 0.9 などになります。 そこで、CumulativeProportion に 1500 を掛けて、線がつぶれてしまわないようにします。\n\nlibrary(ggplot2)\nggplot(dfMatz, aes(x = PitchType, y = Frequency)) +\n  geom_bar(stat = \"identity\") +\n  geom_line(data = dfMatz, aes(x = PitchType, y = CumulativeProportion * 1500, group = 1, inherit.aes = FALSE))\n\nWarning in geom_line(data = dfMatz, aes(x = PitchType, y = CumulativeProportion\n* : Ignoring unknown aesthetics: inherit.aes\n\n\n\n\n\n\n\n\n\n最後に、scale_y_continuous() 関数を使って右側に二つ目の y 軸を設定します。 二つ目 (second) の y 軸なので、sec.axis という引数に、sec_axis() 関数を使って設定します。この辺は、似たような名称のものが連続するので、分かりづらい点ですね。\nなお、このとき、目盛りが 1500 倍されているので、1500 で割ります。\n\nlibrary(ggplot2)\nggplot(dfMatz, aes(x = PitchType, y = Frequency)) +\n  geom_bar(stat = \"identity\") +\n  geom_line(data = dfMatz, aes(x = PitchType, y = CumulativeProportion * 1500, group = 1, inherit.aes = FALSE)) +\n  scale_y_continuous(sec.axis = sec_axis(~./1500, name = \"累積度数\"))\n\nWarning in geom_line(data = dfMatz, aes(x = PitchType, y = CumulativeProportion\n* : Ignoring unknown aesthetics: inherit.aes",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>グラフ (ggplot2)</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#帯グラフと円グラフ",
    "href": "ggplot2.html#帯グラフと円グラフ",
    "title": "9  グラフ (ggplot2)",
    "section": "9.6 帯グラフと円グラフ",
    "text": "9.6 帯グラフと円グラフ\n\n\n\n\n\n\nTip\n\n\n\nTIP 106: 複合グラフ (2)",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>グラフ (ggplot2)</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#long-データから棒グラフ",
    "href": "ggplot2.html#long-データから棒グラフ",
    "title": "9  グラフ (ggplot2)",
    "section": "9.7 Long データから棒グラフ",
    "text": "9.7 Long データから棒グラフ\nまず、データを準備します。 統計検定４級テキスト p. 55 の保健室のデータをちょっと改良したものを用意しました。 エクセルファイルは kentei4.xlsx で、シートは p55-raw です。\n\nlibrary(readxl)\ndfInjury &lt;- read_excel(\"kentei4.xlsx\", sheet = \"p55-raw\")\ndfInjury$Reason &lt;- factor(dfInjury$Reason)\ndfInjury$Gender &lt;- factor(dfInjury$Gender)\n\nでは、ひとまず Reason 列だけで棒グラフを作図してみましょう。\n\nggplot(dfInjury, aes(x = Reason)) +\n  geom_bar(position = \"identity\")",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>グラフ (ggplot2)</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#帯グラフの作図",
    "href": "ggplot2.html#帯グラフの作図",
    "title": "9  グラフ (ggplot2)",
    "section": "9.8 帯グラフの作図",
    "text": "9.8 帯グラフの作図\n\n\n\n\n\n\nTip\n\n\n\nTIP 107: 帯グラフ\n\n\nでは、いよいよ帯グラフを描きましょう。 まず、引数 x には性別を設定します。 引数 y は、件数を数えるため、設定しません。 ここで新たに、fill という引数を設定します。 これが、帯の模様を作る要因になります。\n\nggplot(dfInjury, aes(x = Gender, fill = Reason)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nおや、これでは件数をそのまま積み上げており、比率を求めたことになりません。 帯グラフにするためには、 geom_bar() 関数 に、position = \"fill\" という引数を与えます。\n\nggplot(dfInjury, aes(x = Gender, fill = Reason)) +\n  geom_bar(position = \"fill\") +\n  theme_bw(base_family = \"Hiragino Kaku Gothic Pro W3\")\n\n\n\n\n\n\n\n\nここで、ちょっと分かりにくいのは、ggplot() 関数の中の fill は引数ですが、geom_bar() 関数に与えている “fill” は、文字列なのでクォーテーションマークで囲っています。\n縦棒ではなく、横棒にしましょう。 coord_flip() という関数を追加します。\n\nggplot(dfInjury, aes(x = Gender, fill = Reason)) +\n  geom_bar(position = \"fill\") +\n  coord_flip() +\n  theme_bw(base_family = \"Hiragino Kaku Gothic Pro W3\")\n\n\n\n\n\n\n\n\n色がどぎついままですね。 色については、R では科学ジャーナルに応じた色パレットを提供するパッケージがあります。 パッケージ名は ggsci です。 このパッケージには、Lancet 風の色にする scale_fill_lancet() や、JAMA 風にする scale_fill_jama() 関数があります。。\n\nlibrary(ggsci)\nggplot(dfInjury, aes(x = Gender, fill = Reason)) +\n  geom_bar(position = \"fill\") +\n  coord_flip() +\n  scale_fill_jama() +\n  theme_bw(base_family = \"Hiragino Kaku Gothic Pro W3\")\n\n\n\n\n\n\n\n\n最終的には、以下のようにしてみました。\n\nlibrary(ggsci)\nggplot(dfInjury, aes(x = Gender, fill = Reason)) +\n  geom_bar(position = \"fill\", width = 0.5) +\n  coord_flip() +\n  scale_fill_jama(name = \"理由\") +\n  ggtitle(\"保健室を利用した理由\") +\n  xlab(\"性別\") + ylab(\"割合\") +\n  scale_x_discrete(labels = c(\"女子\", \"男子\")) +\n  theme_bw(base_family = \"Hiragino Kaku Gothic Pro W3\")",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>グラフ (ggplot2)</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#ヒストグラム",
    "href": "ggplot2.html#ヒストグラム",
    "title": "9  グラフ (ggplot2)",
    "section": "9.9 ヒストグラム",
    "text": "9.9 ヒストグラム\n\n\n\n\n\n\nTip\n\n\n\nTIP 108: ヒストグラム\n\n\n統計検定４級テキスト p. 116 に説明されている、「科学の道具箱」のサイトから、「01.小・中学校体力測定データ」をダウンロードします。\n\nlibrary(curl)\ncurl_download(\"https://rika-net.com/contents/cp0530/contents/data/04-03-01.xls\", \"tairyoku.xls\")\n\nlibrary(readxl)\ndfTairyoku &lt;- read_excel(\"tairyoku.xls\")\n\n\nlibrary(readxl)\ndfTairyoku &lt;- read_excel(\"tairyoku.xls\")\n\ndfTairyoku$`学校` &lt;- factor(dfTairyoku$`学校`)\n\nでは、ggplot2 を使って、ヒストグラムを描いてみましょう。 日本語の列名は、バッククォートで囲むことで使うことができます。\n\nlibrary(ggplot2)\nggplot(dfTairyoku, aes(x = `50m走(秒)`)) +\n  geom_histogram() +\n  theme_bw(base_family = \"Hiragino Kaku Gothic Pro W3\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>グラフ (ggplot2)</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#箱ひげ図",
    "href": "ggplot2.html#箱ひげ図",
    "title": "9  グラフ (ggplot2)",
    "section": "9.10 箱ひげ図",
    "text": "9.10 箱ひげ図\n\n\n\n\n\n\nTip\n\n\n\nTIP 109: 箱ひげ図\n\n\n次に箱ひげ図 (box-whisker plot) を描いてみます。 箱ひげ図は、英語では box-whisker ですが、関数名は geom_box() です。\nなお、統計検定４級テキスト p. 117 では、「学校」列で層別化 (strata) しています。\n\nlibrary(ggplot2)\nggplot(dfTairyoku, aes(x = `学校`, y = `50m走(秒)`)) +\n  geom_boxplot() +\n  theme_bw(base_family = \"Hiragino Kaku Gothic Pro W3\")\n\n\n\n\n\n\n\n\np. 118 の図2.3.30 のように、並べて表示するためには、データを Long 形式にしなければなりません。\n\nlibrary(tidyr)\ndfTairyokuLong &lt;- pivot_longer(dfTairyoku,\n                               cols = c(`握力(左)(kg)`, `握力(右)(kg)`),\n                               names_to = \"Hand\",\n                               values_to = \"Handgrip\")\n\nこれで、データが Long になっています。 データを確認してみましょう。\n\n\n\n\n\n\nそれでは、いよいよ図を作成します。 引数 x には学校 (学校列)、y には握力 (Handgrip列) です。 左手と右手を並べるため、fill 引数に Hand 列を指定します。\n\nlibrary(ggplot2)\nggplot(dfTairyokuLong, aes(x = 学校, y = Handgrip, fill = Hand)) +\n  geom_boxplot(width = 0.4)\n\n\n\n\n\n\n\n\n統計検定４級テキスト p. 118 の図2.3.30では、平均値も追加しています。\n\nlibrary(ggplot2)\n\nggplot(dfTairyokuLong, aes(x = 学校, y = Handgrip, fill = Hand)) +\n  geom_boxplot(width = 0.4) +\n  stat_summary(fun.y=mean, geom=\"point\", shape=4, size=3, color=\"black\",\n             position = position_dodge2(width = 0.4, preserve = \"single\"))\n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nℹ Please use the `fun` argument instead.\n\n\n\n\n\n\n\n\n\n小学校と中学校を入れ替えたり、色を変えてみてください。",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>グラフ (ggplot2)</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#散布図",
    "href": "ggplot2.html#散布図",
    "title": "9  グラフ (ggplot2)",
    "section": "9.11 散布図",
    "text": "9.11 散布図\n統計検定４級テキスト p. 118 には、散布図(図2.3.31)があります。 これを作図してみましょう。\n使用するのは、これまでと同じく ggplot2 パッケージです。 点を追加するので、geom_point() 関数を追加します。\n相関の高そうな、握力の右と左を使ってみましょう。 なお、データフレームは Wide 形式の方を使っています。\n\nlibrary(ggplot2)\n\nggplot(dfTairyoku, aes(x = dfTairyoku$`握力(右)(kg)` , dfTairyoku$`握力(左)(kg)`)) +\n  geom_point()\n\nWarning: Use of `` dfTairyoku$`握力(右)(kg)` `` is discouraged.\nℹ Use `握力(右)(kg)` instead.\n\n\nWarning: Use of `` dfTairyoku$`握力(左)(kg)` `` is discouraged.\nℹ Use `握力(左)(kg)` instead.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>グラフ (ggplot2)</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#散布図行列",
    "href": "ggplot2.html#散布図行列",
    "title": "9  グラフ (ggplot2)",
    "section": "9.12 散布図行列",
    "text": "9.12 散布図行列\n\n\n\n\n\n\nTip\n\n\n\nTIP 110: 散布図行列\n\n\n統計検定４級テキスト p. 119 には、散布図がたくさんまとまった図（図2.3.32）があります。 これを作図してみましょう。\n使用するのは、GGally パッケージにある ggpairs() という関数です。 すべての列を使用すると多すぎるので、第４列(握力(右)(kg))から第７列(長座体前屈(cm))までを指定します。\n\nlibrary(GGally)\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\nggpairs(dfTairyoku,\n        columns = c(4, 5, 6, 7))\n\n\n\n\n\n\n\n\n相関図に加えて、相関係数も表示されています。",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>グラフ (ggplot2)</span>"
    ]
  },
  {
    "objectID": "ggplot2.html#保存",
    "href": "ggplot2.html#保存",
    "title": "9  グラフ (ggplot2)",
    "section": "9.13 保存",
    "text": "9.13 保存",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>グラフ (ggplot2)</span>"
    ]
  },
  {
    "objectID": "packaging.html",
    "href": "packaging.html",
    "title": "10  パッケージ開発",
    "section": "",
    "text": "10.1 OS 処理\nif(Sys.info()['sysname'] == \"Darwin\"){\n  print(\"macOS\")\n} else if(Sys.info()['sysname'] == \"Linux\") {\n  print(\"Linux\")\n} else if(Sys.info()['sysname'] == \"Windows\") {\n  print(\"Windows\")\n}",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>パッケージ開発</span>"
    ]
  },
  {
    "objectID": "packaging.html#os-処理",
    "href": "packaging.html#os-処理",
    "title": "10  パッケージ開発",
    "section": "",
    "text": "Tip\n\n\n\nTIP 114 OS ごとに処理を変える",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>パッケージ開発</span>"
    ]
  },
  {
    "objectID": "packaging.html#エラー処理",
    "href": "packaging.html#エラー処理",
    "title": "10  パッケージ開発",
    "section": "10.2 エラー処理",
    "text": "10.2 エラー処理\n\n\n\n\n\n\nTip\n\n\n\nTIP 115 stop()\n\n\n\nfunc &lt;- function(someVal){\n  if (is.na(someVal)) stop(\"someVal is NA.\")\n}",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>パッケージ開発</span>"
    ]
  },
  {
    "objectID": "packaging.html#データ",
    "href": "packaging.html#データ",
    "title": "10  パッケージ開発",
    "section": "10.3 データ",
    "text": "10.3 データ\nパッケージにデータがある場合、多くの場合、R/sysdata.rda ファイルに保存されています。このファイルは、パッケージをアタッチした際に自動的に読み込まれます。\nsysdata.rda を作成するには、あらかじめベクトルやデータフレームなどを作成し、use_data() 関数を使います。\n\ninternal_this &lt;- 1\ninternal_that &lt;- 2\nusethis::use_data(internal_this, internal_that, internal = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>パッケージ開発</span>"
    ]
  },
  {
    "objectID": "git.html",
    "href": "git.html",
    "title": "11  git",
    "section": "",
    "text": "11.1 GitHub\n流れとしては、以下のようになります。\n最初のフォークは、ブラウザ上で行います。\n次に、ローカルに取り込みます。これは、RStudio で、File &gt; New Project\n追加 (https://stackoverflow.com/questions/41283955/github-keeps-saying-this-branch-is-x-commits-ahead-y-commits-behind)\ngit remote add upstream https://github.com/upstream/repo.git\nupstream と同じ状態にしたい時は\ngit pull –rebase upstream main git push –force-with-lease origin main\n前提条件として、\nまず、既存のプロジェクトを GitHub に登録します。この作業は最初の１回だけで良いはずです。 主に３つの方法があります。どれか一つを選んでください。\nこれで、右上に Git タブができたり、Files に .gitignore というファイルができたりします。\n早速、.gitignore に、GitHub で公開・管理しないファイルを登録しておきます。最初の４行がこうなっていると思います。\nGitHub を使ってソース管理をする場合には、Personal Access Token による認証が必要です。\ninstall.packages(\"gitcreds\")\nlibrary(gitcreds)\ngitcreds_set()\nここで、2: Replace these credentials を選択し、上で作成した PAT をコピペ\ngit tag -a v0.0.12 -m 'version 0.0.12'\ngit push origin v0.0.12\nいくつかの原因が考えられます。\nGloban Options と Project Options の git を確認します。\nusethis::use_git()",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>git</span>"
    ]
  },
  {
    "objectID": "git.html#github",
    "href": "git.html#github",
    "title": "11  git",
    "section": "",
    "text": "Tip\n\n\n\nTIP 116: GitHub からプロジェクトをダウンロード\n\n\n\n\nGitHub 上で、元のレポジトリ（これを upstream という）から、自分のレポジトリにフォークする\nフォークしたレポジトリ（origin という）から、自分のパソコンに取り込む（local という）\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 117: プロジェクトを GitHub に登録\n\n\n\n\nGitHub ですでにアカウントを作成済み\nそのプロジェクトの右上ペイン（Environment のあるペイン）に Git タブがない\n\n\n\nR/RStudio でそのプロジェクトを開いておき、Console で usethis::use_git() とする。\nRStudio で、 Tools &gt; Project Options … &gt; Git/SVN と進む。“Version control system” で “Git” を選択し、Confirm New Git Repository? には Yes!\nシェルで git init を実行。\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 118: 認証\n\n\n\n\nGitHub 上で、 personal access token (PAT) を端末ごとに作成\n\n\nfine-grained と classic がある。fine-grained は、色々設定できすぎて大変。classic を使う。\nexpiration を never にしておく。\nwrite:packages にチェック\n\n\nローカルで、以下を実行\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 119: GitHub でタグをつける\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 120 Git タブが表示されない",
    "crumbs": [
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>git</span>"
    ]
  },
  {
    "objectID": "tex.html",
    "href": "tex.html",
    "title": "12  TeX で PDF 出力",
    "section": "",
    "text": "12.1 日本語 PDF\n日本語PDF を作成する場合、これが最も成功率が高い。\nremotes::install_github('Gedevan-Aleksizde/rmdja@development', upgrade = \"never\")\nbookdown の場合、\nrmdja::pdf_book_ja: default\nQuarto Document を選択すると、R Markdown よりも日本語 PDF が作りやすい。このときも {rmdja} を使う。\npreamble.tex\nafter_body.tex\nTeX ファイルを二つ作成\npreamble.tex\nafter_body.tex",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>TeX で PDF 出力</span>"
    ]
  },
  {
    "objectID": "tex.html#日本語-pdf",
    "href": "tex.html#日本語-pdf",
    "title": "12  TeX で PDF 出力",
    "section": "",
    "text": "Tip\n\n\n\nTIP 123: rmdja で日本語 PDF\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 124: Quarto で日本語 PDF\n\n\n\n\nパッケージ {rmdja} をインストール\nTeX ファイルを二つ作成\n\n\n\\usepackage{color}\n\\usepackage{makeidx}\n\\usepackage{colortbl}\n\\usepackage{tcolorbox}\n\\usepackage{booktabs}\n\n\n\n_quarto.yml を以下のように編集\n\nformat:\n  pdf:\n    documentclass: bxjsbook\n    classoption: xelatex,ja=standard\n    default-image-extension: png\n    include-in-header:  preamble.tex\n    include-after-body: after_body.tex\n    papersize: A4\n\n\n\n\n\n\nTip\n\n\n\nTIP 125: Quarto で索引を作成\n\n\n\n\n\\makeindex\n\n\\printindex",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>TeX で PDF 出力</span>"
    ]
  },
  {
    "objectID": "tex.html#tinytex-更新",
    "href": "tex.html#tinytex-更新",
    "title": "12  TeX で PDF 出力",
    "section": "12.2 TinyTex 更新",
    "text": "12.2 TinyTex 更新\n\n\n\n\n\n\nTip\n\n\n\nTIP 126: TinyTex 更新\n\n\nTinyTex は、TeX と呼ばれる R とは異なるソフトウェアを管理しています。TeX も、独自のパッケージ体系を持っています。\nTeX パッケージの更新方法\n\ntinytex::tlmgr_update()\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 127: PDF 作成時に自動更新させない\n\n\nTinyTex は、Bookdown や Quarto などで PDF 作成時に、TeX を更新しようとします。\n.Rprofile に、以下の行を追加します。このファイルは、\n\nWindows: C:&lt;YourUsername&gt;.Rprofile\nmacOS/Linux: ~/.Rprofile (or /Users//.Rprofile on macOS)\n\nにあるか、ない場合は自分で作成します。\noptions(tinytex.auto_install = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>TeX で PDF 出力</span>"
    ]
  },
  {
    "objectID": "thesis.html",
    "href": "thesis.html",
    "title": "13  論文",
    "section": "",
    "text": "13.1 Quarto\nNew Project &gt; New Directory &gt; Quarto Book",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>論文</span>"
    ]
  },
  {
    "objectID": "thesis.html#quarto",
    "href": "thesis.html#quarto",
    "title": "13  論文",
    "section": "",
    "text": "Tip\n\n\n\nTIP 128: Quarto Book",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>論文</span>"
    ]
  },
  {
    "objectID": "thesis.html#文献管理",
    "href": "thesis.html#文献管理",
    "title": "13  論文",
    "section": "13.2 文献管理",
    "text": "13.2 文献管理\n\n\n\n\n\n\nTip\n\n\n\nTIP 129: Zotero を読み込む\n\n\nZotero で文献管理を行なっている場合、\nhttps://www.zotero.org/\nにログイン後、\nhttps://www.zotero.org/settings/keys\nから API キーをコピーしておきます。\n\nlibrary(grid)      # rasterGrob()\nlibrary(magick)    # image_read()\n\nLinking to ImageMagick 6.9.12.98\nEnabled features: cairo, freetype, fftw, ghostscript, heic, lcms, pango, raw, rsvg, webp\nDisabled features: fontconfig, x11\n\nlibrary(gridExtra) # grid.arrange\nimg1 &lt;- rasterGrob(image_read(\"img/thesis-zotero.png\"))\nimg2 &lt;- rasterGrob(image_read(\"img/thesis-zotero-2.png\"))\ngrid.arrange(img1, img2, ncol=2, nrow=1)\n\n\n\n\n\n\n\n\n\nlibrary(RefManageR)\nReadZotero(user = \"7 桁の数字\",\n  .params = c(key = \"24 文字の API キー\"),\n  temp.file = \"references.bib\",\n  delete.file = FALSE)\n\n現状、以下の様なエラーが出て、一部しかダウンロードされていません。日本語に未対応か？\nError in ReadZotero(user = “7 桁の数字”, .params = c(key = “24 文字の API キー”), : Could not parse the returned BibTeX results. If ‘delete.file’ is FALSE, you can try viewing and editing the file: references.bib",
    "crumbs": [
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>論文</span>"
    ]
  },
  {
    "objectID": "clinical.html",
    "href": "clinical.html",
    "title": "14  臨床研究",
    "section": "",
    "text": "14.1 メタ分析\nメタ分析ですが、一番使いやすいのは RCT 用のパッケージ {consort} です。\nデータフレームに、研究名、除外基準１、除外基準２の列を作成します。除外基準には、理由を文字列で書きます。\nこのデータフレームを、以下の様に処理します。\nlibrary(consort)\nout &lt;- consort_plot(data = dfMeta,\n  orders = c(Study = \"検索 (PubMed)\",\n  Excl1    = \"除外\",\n  Study = \"タイトルと要約\\nRisk of Bias 2.0\",\n  Excl2    = \"除外\",\n  Study = \"メタ分析\"),\n  side_box = c(\"Excl1\", \"Excl2\"),\n  cex = 0.9)\nplot(out)",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>臨床研究</span>"
    ]
  },
  {
    "objectID": "clinical.html#メタ分析",
    "href": "clinical.html#メタ分析",
    "title": "14  臨床研究",
    "section": "",
    "text": "Tip\n\n\n\nTIP 130: フローチャート",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>臨床研究</span>"
    ]
  },
  {
    "objectID": "clinical.html#ランダム化",
    "href": "clinical.html#ランダム化",
    "title": "14  臨床研究",
    "section": "14.2 ランダム化",
    "text": "14.2 ランダム化\n\n\n\n\n\n\nTip\n\n\n\nTIP 131: ブロックランダム化\n\n\n{blockrand} パッケージは、ブロックランダム化を行う。引数には、全体のサンプルサイズ (n)、群数 (num.levels)、ブロックサイズ (block.sizes) などを指定する。\nブロックサイズを動的に変更することはできないようである。\n返り値は、データフレームで、行数は n と同じまたは少し多い。\n\nlibrary(blockrand)\na &lt;- blockrand(n = 59, \n                     num.levels = 2, # three treatments\n                     levels = c(\"1\", \"2\"), # arm names\n                     stratum = \"stratum\", # stratum name\n                     id.prefix = \"arm\", # stratum abbrev\n                     block.sizes = c(2,2), # times arms = 3,6,9\n                     block.prefix = \"block\") # stratum abbrev\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 132: Pocock and Simon 法\n\n\nPocock and Simon 法は、最初の被験者は単純無作為化で、その後は既存の割付をみて群間差がないように割り付けていく方法です。\n{covadap} パッケージの PocSim() 関数を使います。\nまず、ダミーデータを作ってみましょう。n = 100 で、性別、年齢３区分、血圧３区分のデータフレームです。\n\ndf1 &lt;- data.frame(\"gender\" = sample(c(\"female\", \"male\"), 100, TRUE, c(1 / 3, 2 / 3)),\n                  \"age\" = sample(c(\"18-35\", \"36-50\", \"&gt;50\"), 100, TRUE),\n                  \"bloodpressure\" = sample(c(\"normal\", \"high\", \"hyper\"), 100, TRUE),\n                   stringsAsFactors = TRUE)\n\n{covadap} パッケージの PocSim() 関数を使ってランダム化し、df1 に group 列を追加します。\n\nrequire(covadap)\nres &lt;- PocSim(df1, p = 0.85, print.results = TRUE)\n\n_________________________________________________________\nDesign: Pocock and Simon\n\nSample_size: 100\n\nn_cov: 3\n\nn_levels: 2 3 3\n\nvar_names: gender age bloodpressure\n_________________________________________________________\nIMBALANCE MEASURES\n \nLoss: 0.49\n\nMahalanobis: 0.48\n\nOverall Imb: 0\n_________________________________________________________\nSTRATA IMBALANCES\n \n   gender   age bloodpressure N.strata A.strata D.strata\n1    male 36-50          high        8        2       -4\n2  female 18-35         hyper       10        5        0\n3    male   &gt;50         hyper        6        4        2\n4    male   &gt;50          high       12        8        4\n5    male 18-35        normal        8        4        0\n6    male 36-50         hyper        9        6        3\n7    male 18-35          high        7        4        1\n8  female   &gt;50          high        2        0       -2\n9    male 18-35         hyper        7        2       -3\n10 female 36-50         hyper        5        2       -1\n11   male   &gt;50        normal        6        2       -2\n12 female 36-50          high        2        2        2\n13 female   &gt;50        normal        4        1       -2\n14   male 36-50        normal        4        1       -2\n15 female   &gt;50         hyper        2        0       -2\n16 female 18-35        normal        2        2        2\n17 female 18-35          high        3        2        1\n18 female 36-50        normal        3        3        3\n_________________________________________________________\nWITHIN COVARIATE IMBALANCES\n \ngender.male: -1\n\ngender.female: 1\n\nage.36-50: 1\n\nage.18-35: 1\n\nage.&gt;50: -2\n\nbloodpressure.high: 2\n\nbloodpressure.hyper: -1\n\nbloodpressure.normal: -1\n\ndf1$group &lt;- res$Assignments\n\n群間の比較をしてみましょう。\n\nlibrary(tableone)\nCreateTableOne(c(\"gender\",\"age\",\"bloodpressure\"),\"group\",df1)\n\n                   Stratified by group\n                    B          A          p      test\n  n                 50         50                    \n  gender = male (%) 34 (68.0)  33 (66.0)   1.000     \n  age (%)                                  0.912     \n     &gt;50            17 (34.0)  15 (30.0)             \n     18-35          18 (36.0)  19 (38.0)             \n     36-50          15 (30.0)  16 (32.0)             \n  bloodpressure (%)                        0.914     \n     high           16 (32.0)  18 (36.0)             \n     hyper          20 (40.0)  19 (38.0)             \n     normal         14 (28.0)  13 (26.0)             \n\n\nバランスもよく、群間の有意差もみられない無作為化ができました。",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>臨床研究</span>"
    ]
  },
  {
    "objectID": "clinical.html#疫学",
    "href": "clinical.html#疫学",
    "title": "14  臨床研究",
    "section": "14.3 疫学",
    "text": "14.3 疫学",
    "crumbs": [
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>臨床研究</span>"
    ]
  },
  {
    "objectID": "os.html",
    "href": "os.html",
    "title": "15  特定の OS の問題",
    "section": "",
    "text": "15.1 Windows\nWindows では、パッケージが OneDrive というフォルダに保存される。ところが、ユーザ名が日本語でああると、パッケージを読み込めなくなってしまう。また、この中には、R のバージョンごとにサブフォルダがある。つまり、バージョンアップをするたびに今までのパッケージは使われなくなる（これは macOS や Linux でも同様）。R のバージョンアップのたびに、パッケージを一からインストールるしなければならない。\nこうした問題を避けるため、(1) 別の場所にパッケージ専用のフォルダを作成し、(2) そこを読み込むように設定する。\nテキストファイルは、RStudio のメニューから、File &gt; New File &gt; Text File を選択する。\nここに、以下のように記述する。\nR_LIBS=“C:\\R” LANGUAGE=“en” # 日本語の場合 ja\nまた、一時ディレクトリが使えないエラーが出たときは、以下のように追加する。\nTMPDIR=“C:\\tmp” TMP=“C:\\tmp” TEMP=“C:\\tmp”\nWindows ではバックスラッシュが正しいが、R ではスラッシュを使う点に注意。\nGitHub 関連のプロジェクトを、ユーザーディレクトリ以外に保存しいると、Git タブが表示されないことがある。\nC:\\Users\\username\\.gitconfig\nに、\nと追加する。",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>特定の OS の問題</span>"
    ]
  },
  {
    "objectID": "os.html#windows",
    "href": "os.html#windows",
    "title": "15  特定の OS の問題",
    "section": "",
    "text": "Tip\n\n\n\nTIP 133 OneDrive 問題\n\n\n\n\n\nC ドライブ直下に R フォルダ（“C:”）を作っておく。\n以下のディレクトリ内に .Renviron というファイルを作成しよう（ファイル名の最初はドット記号）。\n\n\nWindows : C:\\Users\\username\\Documents\nWindows : C:\\Users\\username\\OneDrive\\ドキュメント\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 134 Git タブが表示されない\n\n\n\n\n\n[safe]\n    directory = *",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>特定の OS の問題</span>"
    ]
  },
  {
    "objectID": "os.html#macos",
    "href": "os.html#macos",
    "title": "15  特定の OS の問題",
    "section": "15.2 macOS",
    "text": "15.2 macOS\n\n\n\n\n\n\nTip\n\n\n\nTIP 135: ggplot で日本語を表示 (1): フォント指定\n\n\n\ntheme(text = element_text(family = \"HiraginoSans-W3\"))\n\n\ntm_layout(fontfamily = \"HiraginoSans-W3\")\n\nなお、以下は ggplot ではない Base プロット\n\ngrid.text(\"B. 線に沿った標高\", gp = gpar(fontfamily=\"HiraginoSans-W3\"))\n\n\n\n\n\n\n\nTip\n\n\n\nTIP 136: ggplot で日本語を表示 (2): ragg\n\n\nまず、RStudio の環境設定、General Graphics の Backend を AGG にします。\nragg を使うには、以下のうちのいずれかを行います。\n\n図を出力するチャンクオプションに dev=\"ragg_png\" を追加する\nknitr::opts_chunk(dev = \"ragg_png\") を設定する\nYAML ヘッダ部分に dev: \"ragg_png\" を加える\n\nragg の弱点として、Quarto/Rmd で knit/Build した場合には日本語が表示されますが、 Run Current Chunk をした場合には 文字化けしてしまいます。",
    "crumbs": [
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>特定の OS の問題</span>"
    ]
  },
  {
    "objectID": "python.html",
    "href": "python.html",
    "title": "16  他のプログラミング言語",
    "section": "",
    "text": "16.1 Bash を使ってみる\nBash は、macOS や Linux ではデフォルトでインストール済みのはずです。Windows ではインストールされていない場合があるので、その場合は使用できません。\nコードチャンクの {r} を {bash} にすると、Bash コードを実行するコードチャンクになります。\npwd",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>他のプログラミング言語</span>"
    ]
  },
  {
    "objectID": "python.html#bash-を使ってみる",
    "href": "python.html#bash-を使ってみる",
    "title": "16  他のプログラミング言語",
    "section": "",
    "text": "Tip\n\n\n\nTIP 137 Bash を使ってみる",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>他のプログラミング言語</span>"
    ]
  },
  {
    "objectID": "python.html#python-を使ってみる",
    "href": "python.html#python-を使ってみる",
    "title": "16  他のプログラミング言語",
    "section": "16.2 Python を使ってみる",
    "text": "16.2 Python を使ってみる\n\n\n\n\n\n\nTip\n\n\n\nTIP 138 Python を使ってみる\n\n\nPython は、macOS や Linux ではデフォルトでインストール済みのはずです。Windows ではインストールされていない場合があるので、インストールすることで使用することができます。\nコードチャンクの {r} を {python} にすると、Python コードを実行するコードチャンクになります。なお、{reticulate} パッケージを使います。\n\nimport sys\nsys.version\n\nこれを実行すると、Console が Python に変わり、&gt; が &gt;&gt;&gt; になります。",
    "crumbs": [
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>他のプログラミング言語</span>"
    ]
  }
]